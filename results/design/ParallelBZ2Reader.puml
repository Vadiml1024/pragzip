@startuml

' bluegray cerulean-outline crt-amber materia-outline mimeograph cyborg
!theme crt-amber

'!pragma svek_trace on
/'
generate in your local folder two intermediate files:
    foo.dot : intermediate file in "dot" language provided to GraphViz
    foo.svg : intermediate result file which is going to be parsed by PlantUML to retrieve element positions.
'/

'skinparam backgroundColor #121212
skinparam backgroundColor #000000

/' Use the UML symbols +-#~ for visibility instead of PlantUML-specific icons '/
skinparam classAttributeIconSize 0

set namespaceSeparator ::

hide empty
hide members


'left to right direction  ' Only takes more space vertically, does not reduce width :/
'top to bottom direction

skinparam linetype ortho
'skinparam linetype polyline

/'
"linetype ortho" looks the best imo, but it does not work at all with arrow labels
as they are place too far away to be meaningful. Same bug applies to polyline. See:
  https://forum.plantuml.net/1608/is-it-possible-to-only-use-straight-lines-in-a-class-diagram
  https://crashedmind.github.io/PlantUMLHitchhikersGuide/layout/layout.html#linetype-polyline-ortho
  https://github.com/plantuml/plantuml/issues/149
'/


together {
abstract class FileReader {
    '+~FileReader()
    +{abstract} closed() : bool {query}
    +{abstract} eof() : bool {query}
    +{abstract} seekable() : bool {query}
    +{abstract} fileno() : int {query}
    +{abstract} seek(long long int offset, int origin) : size_t
    +{abstract} size() : size_t {query}
    +{abstract} tell() : size_t {query}
    +{abstract} close() : void
}


class BitReader {
    -{static} determineFileSize(int fileNumber) : size_t
    -{static} determineSeekable(int fileNumber) : size_t
    +{static} fdFilePath(int fileDescriptor) : std::string
    ..
    +BitReader(std::string filePath)
    +BitReader(int fileDescriptor)
    +BitReader(const uint8_t* buffer, size_t size, uint8_t offsetBits)
    +BitReader(std::vector<uint8_t>&& buffer, uint8_t offsetBits)
    +BitReader(BitReader&& other)
    +BitReader(const BitReader& other)
    '+~BitReader()
    +read(char* outputBuffer, size_t nBytesToRead) : size_t
    +seek(long long int offsetBits, int origin) : size_t
    -seekInternal(long long int offsetBits, int origin) : size_t
    +read(uint8_t bitsWanted) : uint32_t
    +read() : uint32_t
    +read64(uint8_t bitsWanted) : uint64_t
    +close() : void
    -readSafe(uint8_t) : uint32_t
    -init() : void
    -refillBuffer() : void
    .. queries ..
    +fp() : FILE* {query}
    +closed() : bool {query}
    +eof() : bool {query}
    +seekable() : bool {query}
    +fileno() : int {query}
    +size() : size_t {query}
    +tell() : size_t {query}
    +buffer() : std::vector<std::uint8_t>& {query}
    --
    -{static} nLowestBitsSet(uint8_t nBitsSet) : T
    -{static} nLowestBitsSet() : T
    +{static} NO_FILE : int
    +{static} IOBUF_SIZE : size_t
    ..
    -m_filePath : std::string
    +m_readBitsCount : size_t
    -m_fileDescriptor : int
    -m_lastReadSuccessful : bool
    -m_inbuf : std::vector<uint8_t>
    +m_inbufBits : uint32_t
    -m_inbufPos : uint32_t
    +m_inbufBitCount : uint8_t
    -m_offsetBits : uint8_t
    -m_file : unique_file_ptr
}

class NamedFileReader {
}

class SharedFileReader {
}

class PythonFileReader {
}

FileReader <|-- BZ2ReaderInterface
FileReader <|-- BitReader
FileReader <|-- NamedFileReader
FileReader <|-- SharedFileReader
FileReader <|-- PythonFileReader

SharedFileReader *-- FileReader
BitReader *-- SharedFileReader

abstract class BZ2ReaderInterface {
    '+~BZ2ReaderInterface()
    +{abstract} blockOffsetsComplete() : bool {query}
    +{abstract} read(const int outputFileDescriptor, char* const outputBuffer, const size_t nBytesToRead) : size_t
    +{abstract} tellCompressed() : size_t {query}
    +{abstract} availableBlockOffsets() : std::map<size_t , size_t> {query}
    +{abstract} blockOffsets() : std::map<size_t , size_t>
    +{abstract} setBlockOffsets(std::map<size_t, size_t> offsets) : void
}
}


namespace bzip2 {
    class Block {
        +Block()
        +Block(Block& &)
        +Block(BitReader& bitReader)
        +operator=(Block& &) : Block&
        +bitReader() : BitReader&
        +eof() : bool {query}
        +eos() : bool {query}
        +readBlockData() : void
        ..
        -getBits() : uint32_t
        -getBits(uint8_t nBits) : uint32_t
        -readBlockHeader() : void
        --
        +bwdata : BurrowsWheelerTransformData
        +isRandomized : bool
        +groupCount : int
        +encodedOffsetInBits : size_t
        +encodedSizeInBits : size_t
        +groups : std::array<GroupData, MAX_GROUPS>
        +selectors : std::array<char, 32768>
        +mtfSymbol : std::array<uint8_t, 256>
        +symbolToByte : std::array<uint8_t, 256>
        +selectors_used : uint16_t
        +magicBytes : uint64_t
        +symbolCount : unsigned int
        ..
        -m_bitReader : BitReader*
        -m_atEndOfFile : bool
        -m_atEndOfStream : bool
    }

    class BurrowsWheelerTransformData {
        +prepare() : void
        +decodeBlock(const uint32_t nMaxBytesToDecode, char* outputBuffer) : uint32_t
        --
        +writeCount : int
        +writeCurrent : int
        +writePos : int
        +writeRun : int
        +byteCount : std::array<int, 256>
        +dbuf : std::vector<uint32_t>
        +dataCRC : uint32_t
        +headerCRC : uint32_t
        +origPtr : uint32_t
    }

    class GroupData {
        +limit : std::array<int, MAX_HUFCODE_BITS + 1>
        +base : std::array<int, MAX_HUFCODE_BITS>
        +permute : std::array<uint16_t, MAX_SYMBOLS>
        +maxLen : uint8_t
        +minLen : uint8_t
    }

    Block *-- GroupData
    Block +--- BurrowsWheelerTransformData
    Block o--- ::BitReader
}


/'
class BZ2Reader {
    +BZ2Reader(const std::string& filePath)
    +BZ2Reader(int fileDescriptor)
    +BZ2Reader(const char* bz2Data, const size_t size)
    -readBlockHeader(size_t bitsOffset) : BlockHeader
    +blockOffsetsComplete() : bool {query}
    +closed() : bool {query}
    +eof() : bool {query}
    +seekable() : bool {query}
    +fileno() : int {query}
    -decodeStream(int outputFileDescriptor, char* outputBuffer, size_t nMaxBytesToDecode) : size_t
    -flushOutputBuffer(int outputFileDescriptor, char* outputBuffer, size_t maxBytesToFlush) : size_t
    +read(const int outputFileDescriptor, char* const outputBuffer, const size_t nBytesToRead) : size_t
    +seek(long long int offset, int origin) : size_t
    +size() : size_t {query}
    +tell() : size_t {query}
    +tellCompressed() : size_t {query}
    +{static} IOBUF_SIZE : static constexpr size_t
    +availableBlockOffsets() : std::map<size_t , size_t> {query}
    +blockOffsets() : std::map<size_t , size_t>
    +crc() : uint32_t {query}
    +close() : void
    #readBzip2Header() : void
    +setBlockOffsets(std::map<size_t, size_t> offsets) : void
    --
    #m_bitReader : BitReader
    -m_lastHeader : Block
    #m_atEndOfFile : bool
    #m_blockToDataOffsetsComplete : bool
    #m_currentPosition : size_t
    -m_decodedBufferPos : size_t
    -m_decodedBytesCount : size_t
    #m_blockToDataOffsets : std::map<size_t, size_t>
    -m_decodedBuffer : std::vector<char>
    #m_calculatedStreamCRC : uint32_t
    #m_streamCRC : uint32_t
    #m_blockSize100k : uint8_t
}

BZ2ReaderInterface <|-- BZ2Reader
BZ2Reader *--- BitReader
BZ2Reader *-- bzip2::Block
'/


together {
namespace CacheStrategy {
    abstract class CacheStrategy <Index> {
        '+~CacheStrategy()
        +{abstract} evict() : std::optional<Index>
        +{abstract} touch(Index index) : void
    }

    class LeastRecentlyUsed <Index> {
        +LeastRecentlyUsed()
        +evict() : std::optional<Index>
        +touch(Index index) : void
        --
        -m_lastUsage : std::map<Index, size_t>
    }

    CacheStrategy <|-- LeastRecentlyUsed
}


class Cache <Key, Value, CacheStrategy> {
    +Cache(size_t maxCacheSize)
    +test(const Key& key) : bool {query}
    +capacity() : size_t {query}
    +hits() : size_t {query}
    +misses() : size_t {query}
    +size() : size_t {query}
    +get(const Key& key) : std::optional<Value>
    +insert(Key key, Value value) : void
    +resetStatistics() : void
    +touch(const Key& key) : void
    --
    -m_cacheStrategy : CacheStrategy
    -m_hits : size_t
    -m_misses : size_t
    -m_maxCacheSize : size_t const
    -m_cache : std::map<Key, Value>
}

Cache *-- CacheStrategy::CacheStrategy
}

class JoiningThread {
    +JoiningThread(T_Args&& ... args)
    +JoiningThread(JoiningThread& &)
    '+~JoiningThread()
    +joinable() : bool {query}
    +get_id() : std::thread::id {query}
    +join() : void
    --
    -m_thread : std::thread
}


namespace ThreadPool {
    class ThreadPool {
        +ThreadPool(unsigned int nThreads)
        +future<decltype(std::declval<T_Functor>( ) ( ) )>submitTask ( T_Functor task)
        '+~ThreadPool()
        +size() : size_t {query}
        +unprocessedTasksCount() : size_t {query}
        -workerMain() : void
        --
        -m_mutex : mutable std::mutex
        -m_threadPoolRunning : std::atomic<bool>
        -m_pingWorkers : std::condition_variable
        -m_tasks : std::deque<PackagedTaskWrapper>
        -m_threads : std::vector<JoiningThread>
    }


    class PackagedTaskWrapper {
        +PackagedTaskWrapper(T_Functor&& functor)
        +operator()() : void
        --
        -m_impl : std::unique_ptr<BaseFunctor>
    }


    abstract class BaseFunctor {
        '+~BaseFunctor()
        +{abstract} operator()() : void
    }


    class SpecializedFunctor <Functor> {
        +SpecializedFunctor(T_Functor&& functor)
        +operator()() : void
        --
        -m_functor : T_Functor
    }


    ThreadPool +-- PackagedTaskWrapper
    PackagedTaskWrapper +-- BaseFunctor
    PackagedTaskWrapper +-- SpecializedFunctor

    BaseFunctor <|-- SpecializedFunctor

    ThreadPool *--- "1..*" ::JoiningThread
}


together {
class BitStringFinder <bitStringSize : uint8_t> {
    +BitStringFinder(BitStringFinder& &)
    +BitStringFinder(std::string const& filePath, uint64_t bitStringToFind, size_t fileBufferSizeBytes)
    +BitStringFinder(int fileDescriptor, uint64_t bitStringToFind, size_t fileBufferSizeBytes)
    +BitStringFinder(const char* buffer, size_t size, uint64_t bitStringToFind)
    #BitStringFinder(uint64_t bitStringToFind, size_t fileBufferSizeBytes, std::string const& filePath)
    '+~BitStringFinder()
    +{static} createdShiftedBitStringLUT(uint64_t bitString, bool includeLastFullyShifted) : ShiftedLUTTable
    +eof() : bool {query}
    +seekable() : bool {query}
    #m_fileChunksInBytes : const size_t
    #m_bitStringToFind : const uint64_t
    #m_movingBitsToKeep : const uint8_t
    #m_movingBytesToKeep : const uint8_t
    #m_file : const unique_file_ptr
    +{static} mask(uint8_t length) : constexpr T
    +find() : size_t
    +{static} findBitString(const uint8_t* buffer, size_t bufferSize, uint64_t bitString, uint8_t firstBitsToIgnore) : size_t
    #m_bufferBitsRead : size_t
    #m_nTotalBytesRead : size_t
    #refillBuffer() : size_t
    +{static} fdFilePath(int fileDescriptor) : std::string
    #m_buffer : std::vector<char>
    #m_movingWindow : uint64_t
}

class ParallelBitStringFinder <bitStringSize : uint8_t> {
    +ParallelBitStringFinder(std::string const& filePath, uint64_t bitStringToFind, size_t parallelization, size_t requestedBytes, size_t fileBufferSizeBytes)
    +ParallelBitStringFinder(int fileDescriptor, uint64_t bitStringToFind, size_t parallelization, size_t requestedBytes, size_t fileBufferSizeBytes)
    +ParallelBitStringFinder(const char* buffer, size_t size, uint64_t bitStringToFind)
    +~ParallelBitStringFinder()
    -{static} chunkSize(size_t const fileBufferSizeBytes, size_t const requestedBytes, size_t const parallelization) : constexpr size_t
    +find() : size_t
    -{static} workerMain(char const* const buffer, size_t const bufferSizeInBytes, uint8_t const firstBitsToIgnore, uint64_t const bitStringToFind, size_t const bitOffsetToAdd, ThreadResults result) : void
    --
    -m_threadPool : ThreadPool
    -m_requestedBytes : const size_t
    -m_threadResults : std::list<ThreadResults>
}

BitStringFinder <|-- ParallelBitStringFinder
BitStringFinder *-- FileReader
ParallelBitStringFinder *--- ThreadPool::ThreadPool
ParallelBitStringFinder *-- FileReader


class ThreadResults {
    +changed : std::condition_variable
    +future : std::future<void>
    +mutex : std::mutex
    +foundOffsets : std::queue<size_t>
}
}

/'
class ThreadSafeOutput {
    +ThreadSafeOutput()
    +string() {query}
    +operator<<(const T& value) : ThreadSafeOutput&
    +str() : std::string {query}
    --
    -m_out : std::stringstream
}
'/

ParallelBitStringFinder +-- ThreadResults


namespace FetchingStrategy {
    class FetchNext {
        -{static} MEMORY_SIZE : static constexpr size_t
        +prefetch(size_t maxAmountToPrefetch) : std::vector<size_t> {query}
        +fetch(size_t index) : void
        --
        -m_lastFetched : std::optional<size_t>
    }

    class FetchNextSmart {
        -{static} MEMORY_SIZE : static constexpr size_t
        +prefetch(size_t maxAmountToPrefetch) : std::vector<size_t> {query}
        +fetch(size_t index) : void
        --
        -m_previousIndexes : std::deque<size_t>
    }

    abstract class FetchingStrategy {
        '+~FetchingStrategy()
        +{abstract} prefetch(size_t maxAmountToPrefetch) : std::vector<size_t> {query}
        +{abstract} fetch(size_t index) : void
    }

    FetchingStrategy <|-- FetchNext
    FetchingStrategy <|--- FetchNextSmart
}


namespace ParallelBZ2Reader{
    class StreamedResults <Value> {
        +results() : ResultsView {query}
        +finalized() : bool {query}
        +size() : size_t {query}
        +get(size_t position, double timeoutInSeconds) : std::optional<Value> {query}
        +finalize(std::optional<size_t> resultsCount) : void
        +push(Value value) : void
        +setResults(deque<Value> results) : void
        --
        -m_results : deque<Value>
        -m_changed : mutable std::condition_variable
        -m_mutex : mutable std::mutex
        -m_finalized : std::atomic<bool>
    }


    class ResultsView {
        +ResultsView(deque<Value> results, std::mutex* mutex)
        +results() : Values& {query}
        --
        -m_results : deque<Value>
        -m_lock : std::scoped_lock<std::mutex>const
    }


    StreamedResults +-- ResultsView


    ' class BlockFetcher <template<typename FetchingStrategy=FetchingStrategy::FetchNextSmart>> {
    class BlockFetcher <FetchingStrategy> {
        +BlockFetcher(BitReader bitReader, std::shared_ptr<BlockFinder> blockFinder, size_t parallelization)
    '    +~BlockFetcher()
        +readBlockHeader(size_t blockOffset) : BlockHeaderData {query}
        +get(size_t blockOffset, std::optional<size_t> dataBlockIndex) : std::shared_ptr<BlockData>
        ..
        -decodeBlock(size_t blockOffset) : BlockData {query}
        --
        -m_cache : Cache<size_t, std::shared_ptr<BlockData>>
        -m_fetchingStrategy : FetchingStrategy
        -m_threadPool : ThreadPool
        -m_bitReader : const BitReader
        -m_parallelization : const size_t
        -m_blockFinder : const std::shared_ptr<BlockFinder>
        -m_analyticsMutex : mutable std::mutex
        -m_cancelThreadsCondition : std::condition_variable
        -m_prefetching : std::map<size_t, std::future<BlockData>>
        -m_blockSize100k : uint8_t
    }


    class BlockFinder {
        +BlockFinder(int fileDescriptor, size_t parallelization)
        +BlockFinder(char const* buffer, size_t size, size_t parallelization)
        +BlockFinder(std::string const& filePath, size_t parallelization)
    '    +~BlockFinder()
        +finalized() : bool {query}
        +find(size_t encodedBlockOffsetInBits) : size_t {query}
        +size() : size_t {query}
        +get(size_t blockNumber, double timeoutInSeconds) : std::optional<size_t>
        +finalize(std::optional<size_t> blockCount) : void
        +setBlockOffsets(StreamedResults<size_t>::Values blockOffsets) : void
        +startThreads() : void
        +stopThreads() : void
        ..
        -blockFinderMain() : void
        --
        -m_bitStringFinder : std::unique_ptr<BitStringFinder>
        -m_blockFinder : std::unique_ptr<JoiningThread>
        -m_blockOffsets : StreamedResults<size_t>
        -m_prefetchCount : const size_t
        -m_mutex : mutable std::mutex
        -m_changed : std::condition_variable
    }

    'BlockFinder *--- "1" ::ParallelBitStringFinder
    BlockFinder *--- ::ParallelBitStringFinder : <<bind>> \n <bitStringSize -> bzip2::MAGIC_BITS_SIZE>
    BlockFinder *-- ::JoiningThread
    BlockFinder *-- StreamedResults
    BlockFinder *--- ::SharedFileReader
    ' : <<bind>> \n <Value -> size_t>

    class BlockMap {
        +BlockMap()
        +findDataOffset(size_t dataOffset) : BlockInfo {query}
        +finalized() : bool {query}
        +dataBlockCount() : size_t {query}
        +blockOffsets() : std::map<size_t , size_t> {query}
        +back() : std::pair<size_t , size_t> {query}
        +finalize() : void
        +push(size_t encodedBlockOffset, size_t encodedSize, size_t decodedSize) : void
        +setBlockOffsets(std::map<size_t, size_t>const& blockOffsets) : void
        --
        -m_mutex : mutable std::mutex
        -m_eosBlocks : std::vector<size_t>
        -m_blockToDataOffsets : std::vector<std::pair<size_t, size_t>>
    }


    class BlockData {
        +data : std::vector<uint8_t>
    }


    class BlockHeaderData {
    }


    class BlockInfo {
        +contains(size_t dataOffset) : bool {query}
    }

    BlockFetcher *--- ::BitReader
    BlockFetcher *-- BlockFinder
    BlockFetcher *--- ::Cache
    BlockFetcher *--- ::FetchingStrategy::FetchingStrategy
    BlockFetcher *--- ::ThreadPool::ThreadPool
    BlockFetcher +-- BlockData
    BlockFetcher +-- BlockHeaderData
    BlockFetcher -left--> ::bzip2::Block

    BlockMap +-- BlockInfo

    class ParallelBZ2Reader {
        +ParallelBZ2Reader(int fileDescriptor, size_t parallelization)
        +ParallelBZ2Reader(const char* bz2Data, const size_t size, size_t parallelization)
        +ParallelBZ2Reader(const std::string& filePath, size_t parallelization)
        +blockOffsetsComplete() : bool {query}
        +closed() : bool {query}
        +eof() : bool {query}
        +seekable() : bool {query}
        +fileno() : int {query}
        +read(const int outputFileDescriptor, char* const outputBuffer, const size_t nBytesToRead) : size_t
        +seek(long long int offset, int origin) : size_t
        +size() : size_t {query}
        +tell() : size_t {query}
        +tellCompressed() : size_t {query}
        +availableBlockOffsets() : std::map<size_t , size_t> {query}
        +blockOffsets() : std::map<size_t , size_t>
        +close() : void
        +joinThreads() : void
        +setBlockOffsets(std::map<size_t, size_t> offsets) : void
        ..
        -blockFetcher() : BlockFetcher&
        -blockFinder() : BlockFinder&
        -writeResult(int const outputFileDescriptor, char* const outputBuffer, char const* const dataToWrite, size_t const dataToWriteSize) : size_t
        -setBlockFinderOffsets(const std::map<size_t, size_t>& offsets) : void
        --
        -m_bitReader : BitReader
        -m_atEndOfFile : bool
        -m_currentPosition : size_t
        -m_fetcherParallelization : size_t const
        -m_startBlockFinder : std::function<std::shared_ptr<BlockFinder>(void)>
        -m_blockFinder : std::shared_ptr<BlockFinder>
        -m_blockFetcher : std::unique_ptr<BlockFetcher>
    }

    ::BZ2ReaderInterface <|-- ParallelBZ2Reader
    ParallelBZ2Reader *--- ::BitReader
    ParallelBZ2Reader *-- BlockFetcher
    ParallelBZ2Reader *-- BlockFinder
    ParallelBZ2Reader *-- BlockMap
}

/' Layouting tricks '/

@enduml
