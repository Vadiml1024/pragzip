<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="764px" preserveAspectRatio="none" style="width:2734px;height:764px;background:#000000;" version="1.1" viewBox="0 0 2734 764" width="2734px" zoomAndPan="magnify"><defs/><g><!--MD5=[e7321eb252d4ecbbf4346639b4de5c64]
cluster bzip2--><polygon fill="#282828" points="21,122,69,122,76,145.0146,303,145.0146,303,438,21,438,21,122" style="stroke:#FFB000;stroke-width:1.0;"/><line style="stroke:#FFB000;stroke-width:1.0;" x1="21" x2="76" y1="145.0146" y2="145.0146"/><text fill="#FFB000" font-family="Verdana" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="42" x="25" y="138.0752">bzip2</text><!--MD5=[3962286791ed47d7bd495c9440d4918c]
cluster CacheStrategy--><polygon fill="#282828" points="1419,471,1538,471,1545,494.0146,1649,494.0146,1649,642,1419,642,1419,471" style="stroke:#FFB000;stroke-width:1.0;"/><line style="stroke:#FFB000;stroke-width:1.0;" x1="1419" x2="1545" y1="494.0146" y2="494.0146"/><text fill="#FFB000" font-family="Verdana" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="113" x="1423" y="487.0752">CacheStrategy</text><!--MD5=[c616b9ab6e833bdec25dfa9be3c5f601]
cluster ThreadPool--><polygon fill="#282828" points="2305,358,2400,358,2407,381.0146,2545,381.0146,2545,757,2305,757,2305,358" style="stroke:#FFB000;stroke-width:1.0;"/><line style="stroke:#FFB000;stroke-width:1.0;" x1="2305" x2="2407" y1="381.0146" y2="381.0146"/><text fill="#FFB000" font-family="Verdana" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="89" x="2309" y="374.0752">ThreadPool</text><!--MD5=[392b9bce62a1a931fee72d4c4871f357]
cluster FetchingStrategy--><polygon fill="#282828" points="383,358,521,358,528,381.0146,563,381.0146,563,642,383,642,383,358" style="stroke:#FFB000;stroke-width:1.0;"/><line style="stroke:#FFB000;stroke-width:1.0;" x1="383" x2="528" y1="381.0146" y2="381.0146"/><text fill="#FFB000" font-family="Verdana" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="132" x="387" y="374.0752">FetchingStrategy</text><!--MD5=[c5f0fcf9c541ac40ff0e009ebb0f2dd5]
cluster ParallelBZ2Reader--><polygon fill="#282828" points="1697,11,1845,11,1852,34.0146,2281,34.0146,2281,551,1697,551,1697,11" style="stroke:#FFB000;stroke-width:1.0;"/><line style="stroke:#FFB000;stroke-width:1.0;" x1="1697" x2="1852" y1="34.0146" y2="34.0146"/><text fill="#FFB000" font-family="Verdana" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="142" x="1701" y="27.0752">ParallelBZ2Reader</text><!--MD5=[d80f71a20ad5bc844207fdd4e8cd5494]
class FileReader--><rect codeLine="40" fill="#282828" height="28" id="FileReader" style="stroke:#FFB000;stroke-width:1.5;" width="101" x="1073.5" y="281"/><ellipse cx="1086.5" cy="295" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M1083.2031,289.3438 L1083.2031,290.7344 L1085.3906,290.7344 L1082.4844,297.8594 L1081.5,297.8594 L1081.5,299.25 L1085.5313,299.25 L1085.5313,297.8594 L1084.0156,297.8594 L1084.6719,296.1875 L1088.5,296.1875 L1089.1719,297.8594 L1087.6719,297.8594 L1087.6719,299.25 L1091.7031,299.25 L1091.7031,297.8594 L1090.75,297.8594 L1087.2969,289.3438 L1083.2031,289.3438 Z M1087.9531,294.7969 L1085.25,294.7969 L1086.5938,291.5469 L1087.9531,294.7969 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="73" x="1098.5" y="300.5679">FileReader</text><!--MD5=[089f6753228577029c3054fc65ab55bd]
class BitReader--><rect codeLine="53" fill="#282828" height="28" id="BitReader" style="stroke:#FFB000;stroke-width:1.5;" width="96" x="603" y="394"/><ellipse cx="616" cy="408" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M619.4063,409.9688 C618.6875,410.6406 617.3906,411.8125 615.6406,411.8125 C613.4219,411.8125 612.4531,409.875 612.4531,407.9219 C612.4531,405.5313 613.9375,404.2656 615.5781,404.2656 C617.5938,404.2656 617.8125,405.7813 617.9844,406.875 L619.4063,406.6875 C619.3125,406.1094 619.2344,405.5313 619.2344,404.5625 C619.2344,403.8906 619.2813,403.3438 619.3125,402.9219 L617.9063,402.9219 L617.7969,403.875 C617.2031,403.3438 616.5625,402.7969 615.3438,402.7969 C613.2969,402.7969 610.8906,404.625 610.8906,407.9375 C610.8906,410.875 612.6563,413.2656 615.6563,413.2656 C618.0938,413.2656 619.7969,411.6406 620.3906,411.0625 L619.4063,409.9688 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="68" x="628" y="413.5679">BitReader</text><!--MD5=[c1011170c48e81889cbc4472dba0df21]
class NamedFileReader--><rect codeLine="102" fill="#282828" height="28" id="NamedFileReader" style="stroke:#FFB000;stroke-width:1.5;" width="147" x="940.5" y="394"/><ellipse cx="953.5" cy="408" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M956.9063,409.9688 C956.1875,410.6406 954.8906,411.8125 953.1406,411.8125 C950.9219,411.8125 949.9531,409.875 949.9531,407.9219 C949.9531,405.5313 951.4375,404.2656 953.0781,404.2656 C955.0938,404.2656 955.3125,405.7813 955.4844,406.875 L956.9063,406.6875 C956.8125,406.1094 956.7344,405.5313 956.7344,404.5625 C956.7344,403.8906 956.7813,403.3438 956.8125,402.9219 L955.4063,402.9219 L955.2969,403.875 C954.7031,403.3438 954.0625,402.7969 952.8438,402.7969 C950.7969,402.7969 948.3906,404.625 948.3906,407.9375 C948.3906,410.875 950.1563,413.2656 953.1563,413.2656 C955.5938,413.2656 957.2969,411.6406 957.8906,411.0625 L956.9063,409.9688 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="119" x="965.5" y="413.5679">NamedFileReader</text><!--MD5=[34131e2ece156134de99aa59653866ae]
class SharedFileReader--><rect codeLine="105" fill="#282828" height="28" id="SharedFileReader" style="stroke:#FFB000;stroke-width:1.5;" width="149" x="1049.5" y="507"/><ellipse cx="1062.5" cy="521" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M1065.9063,522.9688 C1065.1875,523.6406 1063.8906,524.8125 1062.1406,524.8125 C1059.9219,524.8125 1058.9531,522.875 1058.9531,520.9219 C1058.9531,518.5313 1060.4375,517.2656 1062.0781,517.2656 C1064.0938,517.2656 1064.3125,518.7813 1064.4844,519.875 L1065.9063,519.6875 C1065.8125,519.1094 1065.7344,518.5313 1065.7344,517.5625 C1065.7344,516.8906 1065.7813,516.3438 1065.8125,515.9219 L1064.4063,515.9219 L1064.2969,516.875 C1063.7031,516.3438 1063.0625,515.7969 1061.8438,515.7969 C1059.7969,515.7969 1057.3906,517.625 1057.3906,520.9375 C1057.3906,523.875 1059.1563,526.2656 1062.1563,526.2656 C1064.5938,526.2656 1066.2969,524.6406 1066.8906,524.0625 L1065.9063,522.9688 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="121" x="1074.5" y="526.5679">SharedFileReader</text><!--MD5=[6851a74a6ad5f9144db0b1d5d4891aba]
class PythonFileReader--><rect codeLine="108" fill="#282828" height="28" id="PythonFileReader" style="stroke:#FFB000;stroke-width:1.5;" width="148" x="1160" y="394"/><ellipse cx="1173" cy="408" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M1176.4063,409.9688 C1175.6875,410.6406 1174.3906,411.8125 1172.6406,411.8125 C1170.4219,411.8125 1169.4531,409.875 1169.4531,407.9219 C1169.4531,405.5313 1170.9375,404.2656 1172.5781,404.2656 C1174.5938,404.2656 1174.8125,405.7813 1174.9844,406.875 L1176.4063,406.6875 C1176.3125,406.1094 1176.2344,405.5313 1176.2344,404.5625 C1176.2344,403.8906 1176.2813,403.3438 1176.3125,402.9219 L1174.9063,402.9219 L1174.7969,403.875 C1174.2031,403.3438 1173.5625,402.7969 1172.3438,402.7969 C1170.2969,402.7969 1167.8906,404.625 1167.8906,407.9375 C1167.8906,410.875 1169.6563,413.2656 1172.6563,413.2656 C1175.0938,413.2656 1176.7969,411.6406 1177.3906,411.0625 L1176.4063,409.9688 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="120" x="1185" y="413.5679">PythonFileReader</text><!--MD5=[dcd558519944d10393682bd8e91bf011]
class BZ2ReaderInterface--><rect codeLine="120" fill="#282828" height="28" id="BZ2ReaderInterface" style="stroke:#FFB000;stroke-width:1.5;" width="171" x="734.5" y="394"/><ellipse cx="747.5" cy="408" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M744.2031,402.3438 L744.2031,403.7344 L746.3906,403.7344 L743.4844,410.8594 L742.5,410.8594 L742.5,412.25 L746.5313,412.25 L746.5313,410.8594 L745.0156,410.8594 L745.6719,409.1875 L749.5,409.1875 L750.1719,410.8594 L748.6719,410.8594 L748.6719,412.25 L752.7031,412.25 L752.7031,410.8594 L751.75,410.8594 L748.2969,402.3438 L744.2031,402.3438 Z M748.9531,407.7969 L746.25,407.7969 L747.5938,404.5469 L748.9531,407.7969 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="143" x="759.5" y="413.5679">BZ2ReaderInterface</text><!--MD5=[1883bd0b96008e5eace99a87e521eac5]
class bzip2::Block--><rect codeLine="133" fill="#282828" height="28" id="bzip2::Block" style="stroke:#FFB000;stroke-width:1.5;" width="65" x="211.5" y="158"/><ellipse cx="224.5" cy="172" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M227.9063,173.9688 C227.1875,174.6406 225.8906,175.8125 224.1406,175.8125 C221.9219,175.8125 220.9531,173.875 220.9531,171.9219 C220.9531,169.5313 222.4375,168.2656 224.0781,168.2656 C226.0938,168.2656 226.3125,169.7813 226.4844,170.875 L227.9063,170.6875 C227.8125,170.1094 227.7344,169.5313 227.7344,168.5625 C227.7344,167.8906 227.7813,167.3438 227.8125,166.9219 L226.4063,166.9219 L226.2969,167.875 C225.7031,167.3438 225.0625,166.7969 223.8438,166.7969 C221.7969,166.7969 219.3906,168.625 219.3906,171.9375 C219.3906,174.875 221.1563,177.2656 224.1563,177.2656 C226.5938,177.2656 228.2969,175.6406 228.8906,175.0625 L227.9063,173.9688 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="37" x="236.5" y="177.5679">Block</text><!--MD5=[d071f512fa49a04341bd2507580c21fb]
class bzip2::BurrowsWheelerTransformData--><rect codeLine="165" fill="#282828" height="28" id="bzip2::BurrowsWheelerTransformData" style="stroke:#FFB000;stroke-width:1.5;" width="250" x="37" y="394"/><ellipse cx="50" cy="408" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M53.4063,409.9688 C52.6875,410.6406 51.3906,411.8125 49.6406,411.8125 C47.4219,411.8125 46.4531,409.875 46.4531,407.9219 C46.4531,405.5313 47.9375,404.2656 49.5781,404.2656 C51.5938,404.2656 51.8125,405.7813 51.9844,406.875 L53.4063,406.6875 C53.3125,406.1094 53.2344,405.5313 53.2344,404.5625 C53.2344,403.8906 53.2813,403.3438 53.3125,402.9219 L51.9063,402.9219 L51.7969,403.875 C51.2031,403.3438 50.5625,402.7969 49.3438,402.7969 C47.2969,402.7969 44.8906,404.625 44.8906,407.9375 C44.8906,410.875 46.6563,413.2656 49.6563,413.2656 C52.0938,413.2656 53.7969,411.6406 54.3906,411.0625 L53.4063,409.9688 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="222" x="62" y="413.5679">BurrowsWheelerTransformData</text><!--MD5=[862a2016a79e7887e055d2d330d573e3]
class bzip2::GroupData--><rect codeLine="180" fill="#282828" height="28" id="bzip2::GroupData" style="stroke:#FFB000;stroke-width:1.5;" width="105" x="181.5" y="281"/><ellipse cx="194.5" cy="295" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M197.9063,296.9688 C197.1875,297.6406 195.8906,298.8125 194.1406,298.8125 C191.9219,298.8125 190.9531,296.875 190.9531,294.9219 C190.9531,292.5313 192.4375,291.2656 194.0781,291.2656 C196.0938,291.2656 196.3125,292.7813 196.4844,293.875 L197.9063,293.6875 C197.8125,293.1094 197.7344,292.5313 197.7344,291.5625 C197.7344,290.8906 197.7813,290.3438 197.8125,289.9219 L196.4063,289.9219 L196.2969,290.875 C195.7031,290.3438 195.0625,289.7969 193.8438,289.7969 C191.7969,289.7969 189.3906,291.625 189.3906,294.9375 C189.3906,297.875 191.1563,300.2656 194.1563,300.2656 C196.5938,300.2656 198.2969,298.6406 198.8906,298.0625 L197.9063,296.9688 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="77" x="206.5" y="300.5679">GroupData</text><!--MD5=[cf7212f148c2a2f46c357ea31d18a0ad]
class Cache--><rect codeLine="260" fill="#282828" height="28" id="Cache" style="stroke:#FFB000;stroke-width:1.5;" width="232" x="1424" y="394"/><ellipse cx="1437" cy="408" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M1440.4063,409.9688 C1439.6875,410.6406 1438.3906,411.8125 1436.6406,411.8125 C1434.4219,411.8125 1433.4531,409.875 1433.4531,407.9219 C1433.4531,405.5313 1434.9375,404.2656 1436.5781,404.2656 C1438.5938,404.2656 1438.8125,405.7813 1438.9844,406.875 L1440.4063,406.6875 C1440.3125,406.1094 1440.2344,405.5313 1440.2344,404.5625 C1440.2344,403.8906 1440.2813,403.3438 1440.3125,402.9219 L1438.9063,402.9219 L1438.7969,403.875 C1438.2031,403.3438 1437.5625,402.7969 1436.3438,402.7969 C1434.2969,402.7969 1431.8906,404.625 1431.8906,407.9375 C1431.8906,410.875 1433.6563,413.2656 1436.6563,413.2656 C1439.0938,413.2656 1440.7969,411.6406 1441.3906,411.0625 L1440.4063,409.9688 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="42" x="1449" y="413.5679">Cache</text><rect fill="#000000" height="16.584" style="stroke:#FFB000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="160" x="1499" y="391"/><text fill="#FFB000" font-family="Verdana" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="158" x="1500" y="404.0645">Key, Value, CacheStrategy</text><!--MD5=[51bffd95eb75dc6a3c3969a29496eb6e]
class CacheStrategy::CacheStrategy--><rect codeLine="242" fill="#282828" height="28" id="CacheStrategy::CacheStrategy" style="stroke:#FFB000;stroke-width:1.5;" width="169" x="1452.5" y="507"/><ellipse cx="1465.5" cy="521" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M1462.2031,515.3438 L1462.2031,516.7344 L1464.3906,516.7344 L1461.4844,523.8594 L1460.5,523.8594 L1460.5,525.25 L1464.5313,525.25 L1464.5313,523.8594 L1463.0156,523.8594 L1463.6719,522.1875 L1467.5,522.1875 L1468.1719,523.8594 L1466.6719,523.8594 L1466.6719,525.25 L1470.7031,525.25 L1470.7031,523.8594 L1469.75,523.8594 L1466.2969,515.3438 L1462.2031,515.3438 Z M1466.9531,520.7969 L1464.25,520.7969 L1465.5938,517.5469 L1466.9531,520.7969 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="103" x="1477.5" y="526.5679">CacheStrategy</text><rect fill="#000000" height="16.584" style="stroke:#FFB000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="36" x="1588.5" y="504"/><text fill="#FFB000" font-family="Verdana" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="34" x="1589.5" y="517.0645">Index</text><!--MD5=[25ef5df18181944151f505808d02373b]
class CacheStrategy::LeastRecentlyUsed--><rect codeLine="248" fill="#282828" height="28" id="CacheStrategy::LeastRecentlyUsed" style="stroke:#FFB000;stroke-width:1.5;" width="198" x="1435" y="598"/><ellipse cx="1448" cy="612" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M1451.4063,613.9688 C1450.6875,614.6406 1449.3906,615.8125 1447.6406,615.8125 C1445.4219,615.8125 1444.4531,613.875 1444.4531,611.9219 C1444.4531,609.5313 1445.9375,608.2656 1447.5781,608.2656 C1449.5938,608.2656 1449.8125,609.7813 1449.9844,610.875 L1451.4063,610.6875 C1451.3125,610.1094 1451.2344,609.5313 1451.2344,608.5625 C1451.2344,607.8906 1451.2813,607.3438 1451.3125,606.9219 L1449.9063,606.9219 L1449.7969,607.875 C1449.2031,607.3438 1448.5625,606.7969 1447.3438,606.7969 C1445.2969,606.7969 1442.8906,608.625 1442.8906,611.9375 C1442.8906,614.875 1444.6563,617.2656 1447.6563,617.2656 C1450.0938,617.2656 1451.7969,615.6406 1452.3906,615.0625 L1451.4063,613.9688 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="132" x="1460" y="617.5679">LeastRecentlyUsed</text><rect fill="#000000" height="16.584" style="stroke:#FFB000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="36" x="1600" y="595"/><text fill="#FFB000" font-family="Verdana" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="34" x="1601" y="608.0645">Index</text><!--MD5=[fc5e017d96b712e8fb74bbb4bdeb7053]
class ThreadPool::ThreadPool--><rect codeLine="295" fill="#282828" height="28" id="ThreadPool::ThreadPool" style="stroke:#FFB000;stroke-width:1.5;" width="106" x="2392" y="394"/><ellipse cx="2405" cy="408" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M2408.4063,409.9688 C2407.6875,410.6406 2406.3906,411.8125 2404.6406,411.8125 C2402.4219,411.8125 2401.4531,409.875 2401.4531,407.9219 C2401.4531,405.5313 2402.9375,404.2656 2404.5781,404.2656 C2406.5938,404.2656 2406.8125,405.7813 2406.9844,406.875 L2408.4063,406.6875 C2408.3125,406.1094 2408.2344,405.5313 2408.2344,404.5625 C2408.2344,403.8906 2408.2813,403.3438 2408.3125,402.9219 L2406.9063,402.9219 L2406.7969,403.875 C2406.2031,403.3438 2405.5625,402.7969 2404.3438,402.7969 C2402.2969,402.7969 2399.8906,404.625 2399.8906,407.9375 C2399.8906,410.875 2401.6563,413.2656 2404.6563,413.2656 C2407.0938,413.2656 2408.7969,411.6406 2409.3906,411.0625 L2408.4063,409.9688 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="78" x="2417" y="413.5679">ThreadPool</text><!--MD5=[bc60382ce72f7228044d19c5b95445fc]
class ThreadPool::PackagedTaskWrapper--><rect codeLine="311" fill="#282828" height="28" id="ThreadPool::PackagedTaskWrapper" style="stroke:#FFB000;stroke-width:1.5;" width="187" x="2320.5" y="507"/><ellipse cx="2333.5" cy="521" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M2336.9063,522.9688 C2336.1875,523.6406 2334.8906,524.8125 2333.1406,524.8125 C2330.9219,524.8125 2329.9531,522.875 2329.9531,520.9219 C2329.9531,518.5313 2331.4375,517.2656 2333.0781,517.2656 C2335.0938,517.2656 2335.3125,518.7813 2335.4844,519.875 L2336.9063,519.6875 C2336.8125,519.1094 2336.7344,518.5313 2336.7344,517.5625 C2336.7344,516.8906 2336.7813,516.3438 2336.8125,515.9219 L2335.4063,515.9219 L2335.2969,516.875 C2334.7031,516.3438 2334.0625,515.7969 2332.8438,515.7969 C2330.7969,515.7969 2328.3906,517.625 2328.3906,520.9375 C2328.3906,523.875 2330.1563,526.2656 2333.1563,526.2656 C2335.5938,526.2656 2337.2969,524.6406 2337.8906,524.0625 L2336.9063,522.9688 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="159" x="2345.5" y="526.5679">PackagedTaskWrapper</text><!--MD5=[1c1abfb6c963c87d842d4c787819aeb7]
class ThreadPool::BaseFunctor--><rect codeLine="319" fill="#282828" height="28" id="ThreadPool::BaseFunctor" style="stroke:#FFB000;stroke-width:1.5;" width="116" x="2338" y="598"/><ellipse cx="2351" cy="612" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M2347.7031,606.3438 L2347.7031,607.7344 L2349.8906,607.7344 L2346.9844,614.8594 L2346,614.8594 L2346,616.25 L2350.0313,616.25 L2350.0313,614.8594 L2348.5156,614.8594 L2349.1719,613.1875 L2353,613.1875 L2353.6719,614.8594 L2352.1719,614.8594 L2352.1719,616.25 L2356.2031,616.25 L2356.2031,614.8594 L2355.25,614.8594 L2351.7969,606.3438 L2347.7031,606.3438 Z M2352.4531,611.7969 L2349.75,611.7969 L2351.0938,608.5469 L2352.4531,611.7969 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="88" x="2363" y="617.5679">BaseFunctor</text><!--MD5=[91a32cd6cfdb237a5b52491c2bbc4dba]
class ThreadPool::SpecializedFunctor--><rect codeLine="325" fill="#282828" height="28" id="ThreadPool::SpecializedFunctor" style="stroke:#FFB000;stroke-width:1.5;" width="208" x="2321" y="713"/><ellipse cx="2334" cy="727" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M2337.4063,728.9688 C2336.6875,729.6406 2335.3906,730.8125 2333.6406,730.8125 C2331.4219,730.8125 2330.4531,728.875 2330.4531,726.9219 C2330.4531,724.5313 2331.9375,723.2656 2333.5781,723.2656 C2335.5938,723.2656 2335.8125,724.7813 2335.9844,725.875 L2337.4063,725.6875 C2337.3125,725.1094 2337.2344,724.5313 2337.2344,723.5625 C2337.2344,722.8906 2337.2813,722.3438 2337.3125,721.9219 L2335.9063,721.9219 L2335.7969,722.875 C2335.2031,722.3438 2334.5625,721.7969 2333.3438,721.7969 C2331.2969,721.7969 2328.8906,723.625 2328.8906,726.9375 C2328.8906,729.875 2330.6563,732.2656 2333.6563,732.2656 C2336.0938,732.2656 2337.7969,730.6406 2338.3906,730.0625 L2337.4063,728.9688 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="130" x="2346" y="732.5679">SpecializedFunctor</text><rect fill="#000000" height="16.584" style="stroke:#FFB000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="48" x="2484" y="710"/><text fill="#FFB000" font-family="Verdana" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="46" x="2485" y="723.0645">Functor</text><!--MD5=[52ed6c8e08370348d19345312acf5efe]
class BitStringFinder--><rect codeLine="344" fill="#282828" height="28" id="BitStringFinder" style="stroke:#FFB000;stroke-width:1.5;" width="270" x="2418" y="47"/><ellipse cx="2431" cy="61" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M2434.4063,62.9688 C2433.6875,63.6406 2432.3906,64.8125 2430.6406,64.8125 C2428.4219,64.8125 2427.4531,62.875 2427.4531,60.9219 C2427.4531,58.5313 2428.9375,57.2656 2430.5781,57.2656 C2432.5938,57.2656 2432.8125,58.7813 2432.9844,59.875 L2434.4063,59.6875 C2434.3125,59.1094 2434.2344,58.5313 2434.2344,57.5625 C2434.2344,56.8906 2434.2813,56.3438 2434.3125,55.9219 L2432.9063,55.9219 L2432.7969,56.875 C2432.2031,56.3438 2431.5625,55.7969 2430.3438,55.7969 C2428.2969,55.7969 2425.8906,57.625 2425.8906,60.9375 C2425.8906,63.875 2427.6563,66.2656 2430.6563,66.2656 C2433.0938,66.2656 2434.7969,64.6406 2435.3906,64.0625 L2434.4063,62.9688 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="105" x="2443" y="66.5679">BitStringFinder</text><rect fill="#000000" height="16.584" style="stroke:#FFB000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="135" x="2556" y="44"/><text fill="#FFB000" font-family="Verdana" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="133" x="2557" y="57.0645">bitStringSize : uint8_t</text><!--MD5=[63642f8e95b81ecb37d0ee7579b6665d]
class ParallelBitStringFinder--><rect codeLine="370" fill="#282828" height="28" id="ParallelBitStringFinder" style="stroke:#FFB000;stroke-width:1.5;" width="317" x="2406.5" y="158"/><ellipse cx="2419.5" cy="172" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M2422.9063,173.9688 C2422.1875,174.6406 2420.8906,175.8125 2419.1406,175.8125 C2416.9219,175.8125 2415.9531,173.875 2415.9531,171.9219 C2415.9531,169.5313 2417.4375,168.2656 2419.0781,168.2656 C2421.0938,168.2656 2421.3125,169.7813 2421.4844,170.875 L2422.9063,170.6875 C2422.8125,170.1094 2422.7344,169.5313 2422.7344,168.5625 C2422.7344,167.8906 2422.7813,167.3438 2422.8125,166.9219 L2421.4063,166.9219 L2421.2969,167.875 C2420.7031,167.3438 2420.0625,166.7969 2418.8438,166.7969 C2416.7969,166.7969 2414.3906,168.625 2414.3906,171.9375 C2414.3906,174.875 2416.1563,177.2656 2419.1563,177.2656 C2421.5938,177.2656 2423.2969,175.6406 2423.8906,175.0625 L2422.9063,173.9688 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="152" x="2431.5" y="177.5679">ParallelBitStringFinder</text><rect fill="#000000" height="16.584" style="stroke:#FFB000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="135" x="2591.5" y="155"/><text fill="#FFB000" font-family="Verdana" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="133" x="2592.5" y="168.0645">bitStringSize : uint8_t</text><!--MD5=[e508d2b812bc29dd8a8349b8af8f0229]
class ThreadResults--><rect codeLine="390" fill="#282828" height="28" id="ThreadResults" style="stroke:#FFB000;stroke-width:1.5;" width="129" x="2562.5" y="281"/><ellipse cx="2575.5" cy="295" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M2578.9063,296.9688 C2578.1875,297.6406 2576.8906,298.8125 2575.1406,298.8125 C2572.9219,298.8125 2571.9531,296.875 2571.9531,294.9219 C2571.9531,292.5313 2573.4375,291.2656 2575.0781,291.2656 C2577.0938,291.2656 2577.3125,292.7813 2577.4844,293.875 L2578.9063,293.6875 C2578.8125,293.1094 2578.7344,292.5313 2578.7344,291.5625 C2578.7344,290.8906 2578.7813,290.3438 2578.8125,289.9219 L2577.4063,289.9219 L2577.2969,290.875 C2576.7031,290.3438 2576.0625,289.7969 2574.8438,289.7969 C2572.7969,289.7969 2570.3906,291.625 2570.3906,294.9375 C2570.3906,297.875 2572.1563,300.2656 2575.1563,300.2656 C2577.5938,300.2656 2579.2969,298.6406 2579.8906,298.0625 L2578.9063,296.9688 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="101" x="2587.5" y="300.5679">ThreadResults</text><!--MD5=[acdb82372485c98c4ca88f428357a8da]
class FetchingStrategy::FetchNext--><rect codeLine="413" fill="#282828" height="28" id="FetchingStrategy::FetchNext" style="stroke:#FFB000;stroke-width:1.5;" width="99" x="399.5" y="507"/><ellipse cx="412.5" cy="521" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M415.9063,522.9688 C415.1875,523.6406 413.8906,524.8125 412.1406,524.8125 C409.9219,524.8125 408.9531,522.875 408.9531,520.9219 C408.9531,518.5313 410.4375,517.2656 412.0781,517.2656 C414.0938,517.2656 414.3125,518.7813 414.4844,519.875 L415.9063,519.6875 C415.8125,519.1094 415.7344,518.5313 415.7344,517.5625 C415.7344,516.8906 415.7813,516.3438 415.8125,515.9219 L414.4063,515.9219 L414.2969,516.875 C413.7031,516.3438 413.0625,515.7969 411.8438,515.7969 C409.7969,515.7969 407.3906,517.625 407.3906,520.9375 C407.3906,523.875 409.1563,526.2656 412.1563,526.2656 C414.5938,526.2656 416.2969,524.6406 416.8906,524.0625 L415.9063,522.9688 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="71" x="424.5" y="526.5679">FetchNext</text><!--MD5=[8a35e334791fbafee3537d76432f42c8]
class FetchingStrategy::FetchNextSmart--><rect codeLine="421" fill="#282828" height="28" id="FetchingStrategy::FetchNextSmart" style="stroke:#FFB000;stroke-width:1.5;" width="142" x="405" y="598"/><ellipse cx="418" cy="612" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M421.4063,613.9688 C420.6875,614.6406 419.3906,615.8125 417.6406,615.8125 C415.4219,615.8125 414.4531,613.875 414.4531,611.9219 C414.4531,609.5313 415.9375,608.2656 417.5781,608.2656 C419.5938,608.2656 419.8125,609.7813 419.9844,610.875 L421.4063,610.6875 C421.3125,610.1094 421.2344,609.5313 421.2344,608.5625 C421.2344,607.8906 421.2813,607.3438 421.3125,606.9219 L419.9063,606.9219 L419.7969,607.875 C419.2031,607.3438 418.5625,606.7969 417.3438,606.7969 C415.2969,606.7969 412.8906,608.625 412.8906,611.9375 C412.8906,614.875 414.6563,617.2656 417.6563,617.2656 C420.0938,617.2656 421.7969,615.6406 422.3906,615.0625 L421.4063,613.9688 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="114" x="430" y="617.5679">FetchNextSmart</text><!--MD5=[a5e1b434366595f0d9ffc8d4e3d54ddc]
class FetchingStrategy::FetchingStrategy--><rect codeLine="429" fill="#282828" height="28" id="FetchingStrategy::FetchingStrategy" style="stroke:#FFB000;stroke-width:1.5;" width="149" x="398.5" y="394"/><ellipse cx="411.5" cy="408" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M408.2031,402.3438 L408.2031,403.7344 L410.3906,403.7344 L407.4844,410.8594 L406.5,410.8594 L406.5,412.25 L410.5313,412.25 L410.5313,410.8594 L409.0156,410.8594 L409.6719,409.1875 L413.5,409.1875 L414.1719,410.8594 L412.6719,410.8594 L412.6719,412.25 L416.7031,412.25 L416.7031,410.8594 L415.75,410.8594 L412.2969,402.3438 L408.2031,402.3438 Z M412.9531,407.7969 L410.25,407.7969 L411.5938,404.5469 L412.9531,407.7969 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="121" x="423.5" y="413.5679">FetchingStrategy</text><!--MD5=[851fb87061da6bcaf93b9fff20bc5f5f]
class ParallelBZ2Reader::StreamedResults--><rect codeLine="441" fill="#282828" height="28" id="ParallelBZ2Reader::StreamedResults" style="stroke:#FFB000;stroke-width:1.5;" width="185" x="1990.5" y="394"/><ellipse cx="2003.5" cy="408" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M2006.9063,409.9688 C2006.1875,410.6406 2004.8906,411.8125 2003.1406,411.8125 C2000.9219,411.8125 1999.9531,409.875 1999.9531,407.9219 C1999.9531,405.5313 2001.4375,404.2656 2003.0781,404.2656 C2005.0938,404.2656 2005.3125,405.7813 2005.4844,406.875 L2006.9063,406.6875 C2006.8125,406.1094 2006.7344,405.5313 2006.7344,404.5625 C2006.7344,403.8906 2006.7813,403.3438 2006.8125,402.9219 L2005.4063,402.9219 L2005.2969,403.875 C2004.7031,403.3438 2004.0625,402.7969 2002.8438,402.7969 C2000.7969,402.7969 1998.3906,404.625 1998.3906,407.9375 C1998.3906,410.875 2000.1563,413.2656 2003.1563,413.2656 C2005.5938,413.2656 2007.2969,411.6406 2007.8906,411.0625 L2006.9063,409.9688 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="120" x="2015.5" y="413.5679">StreamedResults</text><rect fill="#000000" height="16.584" style="stroke:#FFB000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="35" x="2143.5" y="391"/><text fill="#FFB000" font-family="Verdana" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="33" x="2144.5" y="404.0645">Value</text><!--MD5=[e5c4bf02a67e72373db55a8de890c122]
class ParallelBZ2Reader::ResultsView--><rect codeLine="457" fill="#282828" height="28" id="ParallelBZ2Reader::ResultsView" style="stroke:#FFB000;stroke-width:1.5;" width="112" x="2027" y="507"/><ellipse cx="2040" cy="521" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M2043.4063,522.9688 C2042.6875,523.6406 2041.3906,524.8125 2039.6406,524.8125 C2037.4219,524.8125 2036.4531,522.875 2036.4531,520.9219 C2036.4531,518.5313 2037.9375,517.2656 2039.5781,517.2656 C2041.5938,517.2656 2041.8125,518.7813 2041.9844,519.875 L2043.4063,519.6875 C2043.3125,519.1094 2043.2344,518.5313 2043.2344,517.5625 C2043.2344,516.8906 2043.2813,516.3438 2043.3125,515.9219 L2041.9063,515.9219 L2041.7969,516.875 C2041.2031,516.3438 2040.5625,515.7969 2039.3438,515.7969 C2037.2969,515.7969 2034.8906,517.625 2034.8906,520.9375 C2034.8906,523.875 2036.6563,526.2656 2039.6563,526.2656 C2042.0938,526.2656 2043.7969,524.6406 2044.3906,524.0625 L2043.4063,522.9688 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="84" x="2052" y="526.5679">ResultsView</text><!--MD5=[d0e99fe63cf75d4f97543f349d33183e]
class ParallelBZ2Reader::BlockFetcher--><rect codeLine="470" fill="#282828" height="28" id="ParallelBZ2Reader::BlockFetcher" style="stroke:#FFB000;stroke-width:1.5;" width="223" x="1712.5" y="158"/><ellipse cx="1725.5" cy="172" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M1728.9063,173.9688 C1728.1875,174.6406 1726.8906,175.8125 1725.1406,175.8125 C1722.9219,175.8125 1721.9531,173.875 1721.9531,171.9219 C1721.9531,169.5313 1723.4375,168.2656 1725.0781,168.2656 C1727.0938,168.2656 1727.3125,169.7813 1727.4844,170.875 L1728.9063,170.6875 C1728.8125,170.1094 1728.7344,169.5313 1728.7344,168.5625 C1728.7344,167.8906 1728.7813,167.3438 1728.8125,166.9219 L1727.4063,166.9219 L1727.2969,167.875 C1726.7031,167.3438 1726.0625,166.7969 1724.8438,166.7969 C1722.7969,166.7969 1720.3906,168.625 1720.3906,171.9375 C1720.3906,174.875 1722.1563,177.2656 1725.1563,177.2656 C1727.5938,177.2656 1729.2969,175.6406 1729.8906,175.0625 L1728.9063,173.9688 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="89" x="1737.5" y="177.5679">BlockFetcher</text><rect fill="#000000" height="16.584" style="stroke:#FFB000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="104" x="1834.5" y="155"/><text fill="#FFB000" font-family="Verdana" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="102" x="1835.5" y="168.0645">FetchingStrategy</text><!--MD5=[a95ea3d9f1354a9bc46719d13a91dfd9]
class ParallelBZ2Reader::BlockFinder--><rect codeLine="491" fill="#282828" height="28" id="ParallelBZ2Reader::BlockFinder" style="stroke:#FFB000;stroke-width:1.5;" width="108" x="2029" y="281"/><ellipse cx="2042" cy="295" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M2045.4063,296.9688 C2044.6875,297.6406 2043.3906,298.8125 2041.6406,298.8125 C2039.4219,298.8125 2038.4531,296.875 2038.4531,294.9219 C2038.4531,292.5313 2039.9375,291.2656 2041.5781,291.2656 C2043.5938,291.2656 2043.8125,292.7813 2043.9844,293.875 L2045.4063,293.6875 C2045.3125,293.1094 2045.2344,292.5313 2045.2344,291.5625 C2045.2344,290.8906 2045.2813,290.3438 2045.3125,289.9219 L2043.9063,289.9219 L2043.7969,290.875 C2043.2031,290.3438 2042.5625,289.7969 2041.3438,289.7969 C2039.2969,289.7969 2036.8906,291.625 2036.8906,294.9375 C2036.8906,297.875 2038.6563,300.2656 2041.6563,300.2656 C2044.0938,300.2656 2045.7969,298.6406 2046.3906,298.0625 L2045.4063,296.9688 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="80" x="2054" y="300.5679">BlockFinder</text><!--MD5=[40d9f1fd68466ffb0aefa16ff7297a8c]
class ParallelBZ2Reader::BlockMap--><rect codeLine="522" fill="#282828" height="28" id="ParallelBZ2Reader::BlockMap" style="stroke:#FFB000;stroke-width:1.5;" width="93" x="2115.5" y="158"/><ellipse cx="2128.5" cy="172" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M2131.9063,173.9688 C2131.1875,174.6406 2129.8906,175.8125 2128.1406,175.8125 C2125.9219,175.8125 2124.9531,173.875 2124.9531,171.9219 C2124.9531,169.5313 2126.4375,168.2656 2128.0781,168.2656 C2130.0938,168.2656 2130.3125,169.7813 2130.4844,170.875 L2131.9063,170.6875 C2131.8125,170.1094 2131.7344,169.5313 2131.7344,168.5625 C2131.7344,167.8906 2131.7813,167.3438 2131.8125,166.9219 L2130.4063,166.9219 L2130.2969,167.875 C2129.7031,167.3438 2129.0625,166.7969 2127.8438,166.7969 C2125.7969,166.7969 2123.3906,168.625 2123.3906,171.9375 C2123.3906,174.875 2125.1563,177.2656 2128.1563,177.2656 C2130.5938,177.2656 2132.2969,175.6406 2132.8906,175.0625 L2131.9063,173.9688 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="65" x="2140.5" y="177.5679">BlockMap</text><!--MD5=[e353bc6e9849b981337b6cccfb46836c]
class ParallelBZ2Reader::BlockData--><rect codeLine="539" fill="#282828" height="28" id="ParallelBZ2Reader::BlockData" style="stroke:#FFB000;stroke-width:1.5;" width="98" x="1896" y="281"/><ellipse cx="1909" cy="295" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M1912.4063,296.9688 C1911.6875,297.6406 1910.3906,298.8125 1908.6406,298.8125 C1906.4219,298.8125 1905.4531,296.875 1905.4531,294.9219 C1905.4531,292.5313 1906.9375,291.2656 1908.5781,291.2656 C1910.5938,291.2656 1910.8125,292.7813 1910.9844,293.875 L1912.4063,293.6875 C1912.3125,293.1094 1912.2344,292.5313 1912.2344,291.5625 C1912.2344,290.8906 1912.2813,290.3438 1912.3125,289.9219 L1910.9063,289.9219 L1910.7969,290.875 C1910.2031,290.3438 1909.5625,289.7969 1908.3438,289.7969 C1906.2969,289.7969 1903.8906,291.625 1903.8906,294.9375 C1903.8906,297.875 1905.6563,300.2656 1908.6563,300.2656 C1911.0938,300.2656 1912.7969,298.6406 1913.3906,298.0625 L1912.4063,296.9688 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="70" x="1921" y="300.5679">BlockData</text><!--MD5=[56611cffe2907cefa65ca18633c5cc41]
class ParallelBZ2Reader::BlockHeaderData--><rect codeLine="544" fill="#282828" height="28" id="ParallelBZ2Reader::BlockHeaderData" style="stroke:#FFB000;stroke-width:1.5;" width="147" x="1713.5" y="281"/><ellipse cx="1726.5" cy="295" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M1729.9063,296.9688 C1729.1875,297.6406 1727.8906,298.8125 1726.1406,298.8125 C1723.9219,298.8125 1722.9531,296.875 1722.9531,294.9219 C1722.9531,292.5313 1724.4375,291.2656 1726.0781,291.2656 C1728.0938,291.2656 1728.3125,292.7813 1728.4844,293.875 L1729.9063,293.6875 C1729.8125,293.1094 1729.7344,292.5313 1729.7344,291.5625 C1729.7344,290.8906 1729.7813,290.3438 1729.8125,289.9219 L1728.4063,289.9219 L1728.2969,290.875 C1727.7031,290.3438 1727.0625,289.7969 1725.8438,289.7969 C1723.7969,289.7969 1721.3906,291.625 1721.3906,294.9375 C1721.3906,297.875 1723.1563,300.2656 1726.1563,300.2656 C1728.5938,300.2656 1730.2969,298.6406 1730.8906,298.0625 L1729.9063,296.9688 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="119" x="1738.5" y="300.5679">BlockHeaderData</text><!--MD5=[d782353f824f156245fdc0a58c2f1340]
class ParallelBZ2Reader::BlockInfo--><rect codeLine="548" fill="#282828" height="28" id="ParallelBZ2Reader::BlockInfo" style="stroke:#FFB000;stroke-width:1.5;" width="93" x="2172.5" y="281"/><ellipse cx="2185.5" cy="295" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M2188.9063,296.9688 C2188.1875,297.6406 2186.8906,298.8125 2185.1406,298.8125 C2182.9219,298.8125 2181.9531,296.875 2181.9531,294.9219 C2181.9531,292.5313 2183.4375,291.2656 2185.0781,291.2656 C2187.0938,291.2656 2187.3125,292.7813 2187.4844,293.875 L2188.9063,293.6875 C2188.8125,293.1094 2188.7344,292.5313 2188.7344,291.5625 C2188.7344,290.8906 2188.7813,290.3438 2188.8125,289.9219 L2187.4063,289.9219 L2187.2969,290.875 C2186.7031,290.3438 2186.0625,289.7969 2184.8438,289.7969 C2182.7969,289.7969 2180.3906,291.625 2180.3906,294.9375 C2180.3906,297.875 2182.1563,300.2656 2185.1563,300.2656 C2187.5938,300.2656 2189.2969,298.6406 2189.8906,298.0625 L2188.9063,296.9688 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="65" x="2197.5" y="300.5679">BlockInfo</text><!--MD5=[0c879ee53e3083981f4f1eb3e175b1e2]
class ParallelBZ2Reader::ParallelBZ2Reader--><rect codeLine="563" fill="#282828" height="28" id="ParallelBZ2Reader::ParallelBZ2Reader" style="stroke:#FFB000;stroke-width:1.5;" width="153" x="1747.5" y="47"/><ellipse cx="1760.5" cy="61" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M1763.9063,62.9688 C1763.1875,63.6406 1761.8906,64.8125 1760.1406,64.8125 C1757.9219,64.8125 1756.9531,62.875 1756.9531,60.9219 C1756.9531,58.5313 1758.4375,57.2656 1760.0781,57.2656 C1762.0938,57.2656 1762.3125,58.7813 1762.4844,59.875 L1763.9063,59.6875 C1763.8125,59.1094 1763.7344,58.5313 1763.7344,57.5625 C1763.7344,56.8906 1763.7813,56.3438 1763.8125,55.9219 L1762.4063,55.9219 L1762.2969,56.875 C1761.7031,56.3438 1761.0625,55.7969 1759.8438,55.7969 C1757.7969,55.7969 1755.3906,57.625 1755.3906,60.9375 C1755.3906,63.875 1757.1563,66.2656 1760.1563,66.2656 C1762.5938,66.2656 1764.2969,64.6406 1764.8906,64.0625 L1763.9063,62.9688 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="125" x="1772.5" y="66.5679">ParallelBZ2Reader</text><!--MD5=[0c58926b55c3fb63b033a2aeeff47fba]
class JoiningThread--><rect codeLine="282" fill="#282828" height="28" id="JoiningThread" style="stroke:#FFB000;stroke-width:1.5;" width="125" x="2565.5" y="598"/><ellipse cx="2578.5" cy="612" fill="#FFB000" rx="9" ry="9" style="stroke:#FFB000;stroke-width:1.0;"/><path d="M2581.9063,613.9688 C2581.1875,614.6406 2579.8906,615.8125 2578.1406,615.8125 C2575.9219,615.8125 2574.9531,613.875 2574.9531,611.9219 C2574.9531,609.5313 2576.4375,608.2656 2578.0781,608.2656 C2580.0938,608.2656 2580.3125,609.7813 2580.4844,610.875 L2581.9063,610.6875 C2581.8125,610.1094 2581.7344,609.5313 2581.7344,608.5625 C2581.7344,607.8906 2581.7813,607.3438 2581.8125,606.9219 L2580.4063,606.9219 L2580.2969,607.875 C2579.7031,607.3438 2579.0625,606.7969 2577.8438,606.7969 C2575.7969,606.7969 2573.3906,608.625 2573.3906,611.9375 C2573.3906,614.875 2575.1563,617.2656 2578.1563,617.2656 C2580.5938,617.2656 2582.2969,615.6406 2582.8906,615.0625 L2581.9063,613.9688 Z " fill="#282828"/><text fill="#FFB000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="97" x="2590.5" y="617.5679">JoiningThread</text><!--MD5=[52a0f4393ff8bb425c3c160d08b14913]
reverse link FileReader to BZ2ReaderInterface--><path codeLine="111" d="M1053.47,300 C1053.47,300 848.5,300 848.5,300 C848.5,300 848.5,364.61 848.5,393.88 " fill="none" id="FileReader-backto-BZ2ReaderInterface" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="none" points="1053.47,293,1073.47,300,1053.47,307,1053.47,293" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[d5f3872d89695b0f7da0ca1740a86a61]
reverse link FileReader to BitReader--><path codeLine="112" d="M1053.48,291 C1053.48,291 679.8,291 679.8,291 C679.8,291 679.8,362.41 679.8,393.65 " fill="none" id="FileReader-backto-BitReader" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="none" points="1053.48,284,1073.48,291,1053.48,298,1053.48,284" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[d46e81c4d1a921e14e89b630fe12a17d]
reverse link FileReader to NamedFileReader--><path codeLine="113" d="M1080.5,329.31 C1080.5,329.31 1080.5,393.8 1080.5,393.8 " fill="none" id="FileReader-backto-NamedFileReader" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="none" points="1073.5,329.31,1080.5,309.31,1087.5,329.31,1073.5,329.31" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[46952bd2821db793f4c4066e2cb78e2c]
reverse link FileReader to SharedFileReader--><path codeLine="114" d="M1105.62,329.14 C1105.62,329.14 1105.62,506.87 1105.62,506.87 " fill="none" id="FileReader-backto-SharedFileReader" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="none" points="1098.63,329.14,1105.62,309.14,1112.63,329.14,1098.63,329.14" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[0a1412564d7e0fd432368a584730f6fc]
reverse link SharedFileReader to FileReader--><path codeLine="117" d="M1123.75,493.86 C1123.75,493.86 1123.75,309.13 1123.75,309.13 " fill="none" id="SharedFileReader-backto-FileReader" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="#FFB000" points="1123.75,506.86,1127.75,500.86,1123.75,494.86,1119.75,500.86,1123.75,506.86" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[7e40d49ca6ff374d1f43b362e04533c7]
reverse link FileReader to PythonFileReader--><path codeLine="115" d="M1167.25,329.31 C1167.25,329.31 1167.25,393.8 1167.25,393.8 " fill="none" id="FileReader-backto-PythonFileReader" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="none" points="1160.25,329.31,1167.25,309.31,1174.25,329.31,1160.25,329.31" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[41b9b2359256691780ccedc4282bc37f]
reverse link BitReader to SharedFileReader--><path codeLine="118" d="M651,435.31 C651,435.31 651,521 651,521 C651,521 916.02,521 1049.31,521 " fill="none" id="BitReader-backto-SharedFileReader" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="#FFB000" points="651,422.31,647,428.31,651,434.31,655,428.31,651,422.31" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[dbaf9501282cdcf99dbbfa385ba419c3]
reverse link bzip2::Block to bzip2::GroupData--><path codeLine="188" d="M244,199.11 C244,199.11 244,280.68 244,280.68 " fill="none" id="bzip2::Block-backto-bzip2::GroupData" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="#FFB000" points="244,186.11,240,192.11,244,198.11,248,192.11,244,186.11" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[c87caa2eff08a8d931d70d50db7ec98d]
reverse link bzip2::Block to bzip2::BurrowsWheelerTransformData--><path codeLine="189" d="M196.38,172 C196.38,172 109.25,172 109.25,172 C109.25,172 109.25,343.14 109.25,393.94 " fill="none" id="bzip2::Block-backto-bzip2::BurrowsWheelerTransformData" style="stroke:#FFB000;stroke-width:1.0;"/><ellipse cx="203.38" cy="172" fill="#000000" rx="8" ry="8" style="stroke:#FFB000;stroke-width:1.0;"/><line style="stroke:#FFB000;stroke-width:1.0;" x1="195.38" x2="211.38" y1="172" y2="172"/><line style="stroke:#FFB000;stroke-width:1.0;" x1="203.38" x2="203.38" y1="164" y2="180"/><!--MD5=[8190b4c94488eda703f72688edd0d095]
reverse link bzip2::Block to BitReader--><path codeLine="190" d="M289.57,177 C289.57,177 622.2,177 622.2,177 C622.2,177 622.2,343.74 622.2,393.9 " fill="none" id="bzip2::Block-backto-BitReader" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="#000000" points="276.57,177,282.57,181,288.57,177,282.57,173,276.57,177" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[1135077ce390c6e7de39560337866a99]
reverse link CacheStrategy::CacheStrategy to CacheStrategy::LeastRecentlyUsed--><path codeLine="256" d="M1537,555.22 C1537,555.22 1537,597.88 1537,597.88 " fill="none" id="CacheStrategy::CacheStrategy-backto-CacheStrategy::LeastRecentlyUsed" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="none" points="1530,555.22,1537,535.22,1544,555.22,1530,555.22" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[d60ee1b83793bcab8b4ab1aa16063e9b]
reverse link Cache to CacheStrategy::CacheStrategy--><path codeLine="279" d="M1537,435.31 C1537,435.31 1537,506.8 1537,506.8 " fill="none" id="Cache-backto-CacheStrategy::CacheStrategy" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="#FFB000" points="1537,422.31,1533,428.31,1537,434.31,1541,428.31,1537,422.31" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[2482e0632c5dc026311e3fb51d144d0c]
reverse link ThreadPool::ThreadPool to ThreadPool::PackagedTaskWrapper--><path codeLine="333" d="M2445,437.31 C2445,437.31 2445,506.8 2445,506.8 " fill="none" id="ThreadPool::ThreadPool-backto-ThreadPool::PackagedTaskWrapper" style="stroke:#FFB000;stroke-width:1.0;"/><ellipse cx="2445" cy="430.31" fill="#000000" rx="8" ry="8" style="stroke:#FFB000;stroke-width:1.0;"/><line style="stroke:#FFB000;stroke-width:1.0;" x1="2445" x2="2445" y1="438.31" y2="422.31"/><line style="stroke:#FFB000;stroke-width:1.0;" x1="2437" x2="2453" y1="430.31" y2="430.31"/><!--MD5=[1e237a8ba28266514b97affe992e6dda]
reverse link ThreadPool::PackagedTaskWrapper to ThreadPool::BaseFunctor--><path codeLine="334" d="M2396,550.22 C2396,550.22 2396,597.88 2396,597.88 " fill="none" id="ThreadPool::PackagedTaskWrapper-backto-ThreadPool::BaseFunctor" style="stroke:#FFB000;stroke-width:1.0;"/><ellipse cx="2396" cy="543.22" fill="#000000" rx="8" ry="8" style="stroke:#FFB000;stroke-width:1.0;"/><line style="stroke:#FFB000;stroke-width:1.0;" x1="2396" x2="2396" y1="551.22" y2="535.22"/><line style="stroke:#FFB000;stroke-width:1.0;" x1="2388" x2="2404" y1="543.22" y2="543.22"/><!--MD5=[6af4e60eb69574fabd69f802d8e89f9d]
reverse link ThreadPool::PackagedTaskWrapper to ThreadPool::SpecializedFunctor--><path codeLine="335" d="M2329.5,550.16 C2329.5,550.16 2329.5,712.74 2329.5,712.74 " fill="none" id="ThreadPool::PackagedTaskWrapper-backto-ThreadPool::SpecializedFunctor" style="stroke:#FFB000;stroke-width:1.0;"/><ellipse cx="2329.5" cy="543.16" fill="#000000" rx="8" ry="8" style="stroke:#FFB000;stroke-width:1.0;"/><line style="stroke:#FFB000;stroke-width:1.0;" x1="2329.5" x2="2329.5" y1="551.16" y2="535.16"/><line style="stroke:#FFB000;stroke-width:1.0;" x1="2321.5" x2="2337.5" y1="543.16" y2="543.16"/><!--MD5=[7cd246774eb9105c33234eb0b7eee0f8]
reverse link ThreadPool::BaseFunctor to ThreadPool::SpecializedFunctor--><path codeLine="337" d="M2396,646.1 C2396,646.1 2396,712.78 2396,712.78 " fill="none" id="ThreadPool::BaseFunctor-backto-ThreadPool::SpecializedFunctor" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="none" points="2389,646.1,2396,626.1,2403,646.1,2389,646.1" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[deb242df717dafd9335ad39d601c3ef9]
reverse link ThreadPool::ThreadPool to JoiningThread--><path codeLine="339" d="M2511.1,408 C2511.1,408 2607.17,408 2607.17,408 C2607.17,408 2607.17,551.89 2607.17,597.98 " fill="none" id="ThreadPool::ThreadPool-backto-JoiningThread" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="#FFB000" points="2498.1,408,2504.1,412,2510.1,408,2504.1,404,2498.1,408" style="stroke:#FFB000;stroke-width:1.0;"/><text fill="#FFB000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="27" x="2566.0089" y="587.3377">1..*</text><!--MD5=[872ff802b53fe52d002532adf9976a6c]
reverse link BitStringFinder to ParallelBitStringFinder--><path codeLine="384" d="M2598,95.06 C2598,95.06 2598,157.71 2598,157.71 " fill="none" id="BitStringFinder-backto-ParallelBitStringFinder" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="none" points="2591,95.06,2598,75.06,2605,95.06,2591,95.06" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[63aaf004bea61a488b13dd71ec4c7b8f]
reverse link BitStringFinder to FileReader--><path codeLine="385" d="M2508,88.13 C2508,88.13 2508,117 2508,117 C2508,117 1107.17,117 1107.17,117 C1107.17,117 1107.17,238.5 1107.17,280.73 " fill="none" id="BitStringFinder-backto-FileReader" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="#FFB000" points="2508,75.13,2504,81.13,2508,87.13,2512,81.13,2508,75.13" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[037d87708250d5a5e3240900d53c5c69]
reverse link ParallelBitStringFinder to ThreadPool::ThreadPool--><path codeLine="386" d="M2475.12,199.06 C2475.12,199.06 2475.12,393.72 2475.12,393.72 " fill="none" id="ParallelBitStringFinder-backto-ThreadPool::ThreadPool" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="#FFB000" points="2475.12,186.06,2471.12,192.06,2475.12,198.06,2479.12,192.06,2475.12,186.06" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[0b18c006252d867a2b9bbb0cef3c045b]
reverse link ParallelBitStringFinder to FileReader--><path codeLine="387" d="M2429.38,199.15 C2429.38,199.15 2429.38,210 2429.38,210 C2429.38,210 1140.83,210 1140.83,210 C1140.83,210 1140.83,256.82 1140.83,280.96 " fill="none" id="ParallelBitStringFinder-backto-FileReader" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="#FFB000" points="2429.38,186.15,2425.38,192.15,2429.38,198.15,2433.38,192.15,2429.38,186.15" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[35fea506ba078a5b36d0a346bc372381]
reverse link ParallelBitStringFinder to ThreadResults--><path codeLine="409" d="M2627,201.11 C2627,201.11 2627,280.68 2627,280.68 " fill="none" id="ParallelBitStringFinder-backto-ThreadResults" style="stroke:#FFB000;stroke-width:1.0;"/><ellipse cx="2627" cy="194.11" fill="#000000" rx="8" ry="8" style="stroke:#FFB000;stroke-width:1.0;"/><line style="stroke:#FFB000;stroke-width:1.0;" x1="2627" x2="2627" y1="202.11" y2="186.11"/><line style="stroke:#FFB000;stroke-width:1.0;" x1="2619" x2="2635" y1="194.11" y2="194.11"/><!--MD5=[3da35773a289c32b01b09ef7d77a7bfe]
reverse link FetchingStrategy::FetchingStrategy to FetchingStrategy::FetchNext--><path codeLine="435" d="M449,442.31 C449,442.31 449,506.8 449,506.8 " fill="none" id="FetchingStrategy::FetchingStrategy-backto-FetchingStrategy::FetchNext" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="none" points="442,442.31,449,422.31,456,442.31,442,442.31" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[a9b423c10a4c7a6e75b1d04dd5d99415]
reverse link FetchingStrategy::FetchingStrategy to FetchingStrategy::FetchNextSmart--><path codeLine="436" d="M522.75,442.02 C522.75,442.02 522.75,597.88 522.75,597.88 " fill="none" id="FetchingStrategy::FetchingStrategy-backto-FetchingStrategy::FetchNextSmart" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="none" points="515.75,442.02,522.75,422.02,529.75,442.02,515.75,442.02" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[8d9bedd291cfe791f726da6deb75ffd5]
reverse link ParallelBZ2Reader::StreamedResults to ParallelBZ2Reader::ResultsView--><path codeLine="466" d="M2083,437.31 C2083,437.31 2083,506.8 2083,506.8 " fill="none" id="ParallelBZ2Reader::StreamedResults-backto-ParallelBZ2Reader::ResultsView" style="stroke:#FFB000;stroke-width:1.0;"/><ellipse cx="2083" cy="430.31" fill="#000000" rx="8" ry="8" style="stroke:#FFB000;stroke-width:1.0;"/><line style="stroke:#FFB000;stroke-width:1.0;" x1="2083" x2="2083" y1="438.31" y2="422.31"/><line style="stroke:#FFB000;stroke-width:1.0;" x1="2075" x2="2091" y1="430.31" y2="430.31"/><!--MD5=[5e3d7e3aea95a5be26ce58e48f98844b]
reverse link ParallelBZ2Reader::BlockFinder to ParallelBitStringFinder--><path codeLine="516" d="M2126.25,267.8 C2126.25,267.8 2126.25,258 2126.25,258 C2126.25,258 2452.25,258 2452.25,258 C2452.25,258 2452.25,210.63 2452.25,186.2 " fill="none" id="ParallelBZ2Reader::BlockFinder-backto-ParallelBitStringFinder" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="#FFB000" points="2126.25,280.8,2130.25,274.8,2126.25,268.8,2122.25,274.8,2126.25,280.8" style="stroke:#FFB000;stroke-width:1.0;"/><text fill="#FFB000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="43" x="2540.5" y="230.0698">«bind»</text><text fill="#FFB000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="294" x="2420" y="245.8691">&lt;bitStringSize -&gt; bzip2::MAGIC_BITS_SIZE&gt;</text><!--MD5=[8b1266294f138988d5a16ae3419195cd]
reverse link ParallelBZ2Reader::BlockFinder to JoiningThread--><path codeLine="517" d="M2110,322.03 C2110,322.03 2110,366 2110,366 C2110,366 2648.83,366 2648.83,366 C2648.83,366 2648.83,545.21 2648.83,597.71 " fill="none" id="ParallelBZ2Reader::BlockFinder-backto-JoiningThread" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="#FFB000" points="2110,309.03,2106,315.03,2110,321.03,2114,315.03,2110,309.03" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[ac8ea3571c5a14de46dcec0a3d07300d]
reverse link ParallelBZ2Reader::BlockFinder to ParallelBZ2Reader::StreamedResults--><path codeLine="518" d="M2083,322.31 C2083,322.31 2083,393.8 2083,393.8 " fill="none" id="ParallelBZ2Reader::BlockFinder-backto-ParallelBZ2Reader::StreamedResults" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="#FFB000" points="2083,309.31,2079,315.31,2083,321.31,2087,315.31,2083,309.31" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[7d2425e0ad8ef6e09f7ac672585c8c9c]
reverse link ParallelBZ2Reader::BlockFinder to SharedFileReader--><path codeLine="519" d="M2056,322.08 C2056,322.08 2056,338 2056,338 C2056,338 1141.88,338 1141.88,338 C1141.88,338 1141.88,464.09 1141.88,506.94 " fill="none" id="ParallelBZ2Reader::BlockFinder-backto-SharedFileReader" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="#FFB000" points="2056,309.08,2052,315.08,2056,321.08,2060,315.08,2056,309.08" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[03c760ad2ee1f70ccf2e08e1abfe80e8]
reverse link ParallelBZ2Reader::BlockFetcher to BitReader--><path codeLine="552" d="M1699.45,172 C1699.45,172 660.6,172 660.6,172 C660.6,172 660.6,343.14 660.6,393.94 " fill="none" id="ParallelBZ2Reader::BlockFetcher-backto-BitReader" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="#FFB000" points="1712.45,172,1706.45,168,1700.45,172,1706.45,176,1712.45,172" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[2b960b84fa0077bac93850f34d8fedff]
reverse link ParallelBZ2Reader::BlockFetcher to ParallelBZ2Reader::BlockFinder--><path codeLine="553" d="M1948.78,172 C1948.78,172 2057.83,172 2057.83,172 C2057.83,172 2057.83,248.58 2057.83,280.89 " fill="none" id="ParallelBZ2Reader::BlockFetcher-backto-ParallelBZ2Reader::BlockFinder" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="#FFB000" points="1935.78,172,1941.78,176,1947.78,172,1941.78,168,1935.78,172" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[42d872d697610346028f8fa4a23ed48d]
reverse link ParallelBZ2Reader::BlockFetcher to Cache--><path codeLine="554" d="M1699.16,182 C1699.16,182 1540,182 1540,182 C1540,182 1540,344.39 1540,393.86 " fill="none" id="ParallelBZ2Reader::BlockFetcher-backto-Cache" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="#FFB000" points="1712.16,182,1706.16,178,1700.16,182,1706.16,186,1712.16,182" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[5a7738523e5d9e8e53e7a66432248422]
reverse link ParallelBZ2Reader::BlockFetcher to FetchingStrategy::FetchingStrategy--><path codeLine="555" d="M1699.29,168 C1699.29,168 473,168 473,168 C473,168 473,342.04 473,393.71 " fill="none" id="ParallelBZ2Reader::BlockFetcher-backto-FetchingStrategy::FetchingStrategy" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="#FFB000" points="1712.29,168,1706.29,164,1700.29,168,1706.29,172,1712.29,168" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[d6bd61c5a8fa9da5d886636f32002bf1]
reverse link ParallelBZ2Reader::BlockFetcher to ThreadPool::ThreadPool--><path codeLine="556" d="M1922.33,199.07 C1922.33,199.07 1922.33,234 1922.33,234 C1922.33,234 2399.25,234 2399.25,234 C2399.25,234 2399.25,352.2 2399.25,393.76 " fill="none" id="ParallelBZ2Reader::BlockFetcher-backto-ThreadPool::ThreadPool" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="#FFB000" points="1922.33,186.07,1918.33,192.07,1922.33,198.07,1926.33,192.07,1922.33,186.07" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[f2799bf28e0aae6cdd6a9130aecf3208]
reverse link ParallelBZ2Reader::BlockFetcher to ParallelBZ2Reader::BlockData--><path codeLine="557" d="M1909.17,201.11 C1909.17,201.11 1909.17,280.68 1909.17,280.68 " fill="none" id="ParallelBZ2Reader::BlockFetcher-backto-ParallelBZ2Reader::BlockData" style="stroke:#FFB000;stroke-width:1.0;"/><ellipse cx="1909.17" cy="194.11" fill="#000000" rx="8" ry="8" style="stroke:#FFB000;stroke-width:1.0;"/><line style="stroke:#FFB000;stroke-width:1.0;" x1="1909.17" x2="1909.17" y1="202.11" y2="186.11"/><line style="stroke:#FFB000;stroke-width:1.0;" x1="1901.17" x2="1917.17" y1="194.11" y2="194.11"/><!--MD5=[c74101d877460126b910fbc8967f7a3a]
reverse link ParallelBZ2Reader::BlockFetcher to ParallelBZ2Reader::BlockHeaderData--><path codeLine="558" d="M1787,201.11 C1787,201.11 1787,280.68 1787,280.68 " fill="none" id="ParallelBZ2Reader::BlockFetcher-backto-ParallelBZ2Reader::BlockHeaderData" style="stroke:#FFB000;stroke-width:1.0;"/><ellipse cx="1787" cy="194.11" fill="#000000" rx="8" ry="8" style="stroke:#FFB000;stroke-width:1.0;"/><line style="stroke:#FFB000;stroke-width:1.0;" x1="1787" x2="1787" y1="202.11" y2="186.11"/><line style="stroke:#FFB000;stroke-width:1.0;" x1="1779" x2="1795" y1="194.11" y2="194.11"/><!--MD5=[503b87b8941ae24dc948be7bf2b1da91]
reverse link bzip2::Block to ParallelBZ2Reader::BlockFetcher--><path codeLine="559" d="M281.64,163 C281.64,163 1712.33,163 1712.33,163 " fill="none" id="bzip2::Block-backto-ParallelBZ2Reader::BlockFetcher" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="#FFB000" points="276.64,163,285.64,167,281.64,163,285.64,159,276.64,163" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[948c0873dab9868ff7d4af5f1f655be0]
reverse link ParallelBZ2Reader::BlockMap to ParallelBZ2Reader::BlockInfo--><path codeLine="561" d="M2190.5,201.11 C2190.5,201.11 2190.5,280.68 2190.5,280.68 " fill="none" id="ParallelBZ2Reader::BlockMap-backto-ParallelBZ2Reader::BlockInfo" style="stroke:#FFB000;stroke-width:1.0;"/><ellipse cx="2190.5" cy="194.11" fill="#000000" rx="8" ry="8" style="stroke:#FFB000;stroke-width:1.0;"/><line style="stroke:#FFB000;stroke-width:1.0;" x1="2190.5" x2="2190.5" y1="202.11" y2="186.11"/><line style="stroke:#FFB000;stroke-width:1.0;" x1="2182.5" x2="2198.5" y1="194.11" y2="194.11"/><!--MD5=[467fa65389a0c3d3f7a50b4373d93816]
reverse link BZ2ReaderInterface to ParallelBZ2Reader::ParallelBZ2Reader--><path codeLine="597" d="M791.5,373.74 C791.5,373.74 791.5,66 791.5,66 C791.5,66 1507.95,66 1747.24,66 " fill="none" id="BZ2ReaderInterface-backto-ParallelBZ2Reader::ParallelBZ2Reader" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="none" points="798.5,373.74,791.5,393.74,784.5,373.74,798.5,373.74" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[7cce78afc03e966a8317a0f09d3d024c]
reverse link ParallelBZ2Reader::ParallelBZ2Reader to BitReader--><path codeLine="598" d="M1734.32,57 C1734.32,57 641.4,57 641.4,57 C641.4,57 641.4,328.14 641.4,393.81 " fill="none" id="ParallelBZ2Reader::ParallelBZ2Reader-backto-BitReader" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="#FFB000" points="1747.32,57,1741.32,53,1735.32,57,1741.32,61,1747.32,57" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[dbe2c83eb3a0ff882173ad344176be87]
reverse link ParallelBZ2Reader::ParallelBZ2Reader to ParallelBZ2Reader::BlockFetcher--><path codeLine="599" d="M1824,88.06 C1824,88.06 1824,157.71 1824,157.71 " fill="none" id="ParallelBZ2Reader::ParallelBZ2Reader-backto-ParallelBZ2Reader::BlockFetcher" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="#FFB000" points="1824,75.06,1820,81.06,1824,87.06,1828,81.06,1824,75.06" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[f80def947e162761bf337782fd7b2c3d]
reverse link ParallelBZ2Reader::ParallelBZ2Reader to ParallelBZ2Reader::BlockFinder--><path codeLine="600" d="M1913.68,66 C1913.68,66 2086.67,66 2086.67,66 C2086.67,66 2086.67,230.54 2086.67,280.68 " fill="none" id="ParallelBZ2Reader::ParallelBZ2Reader-backto-ParallelBZ2Reader::BlockFinder" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="#FFB000" points="1900.68,66,1906.68,70,1912.68,66,1906.68,62,1900.68,66" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[5542a9bbf0c0e0ee80a54553c6cbde58]
reverse link ParallelBZ2Reader::ParallelBZ2Reader to ParallelBZ2Reader::BlockMap--><path codeLine="601" d="M1913.7,57 C1913.7,57 2162,57 2162,57 C2162,57 2162,127.19 2162,157.9 " fill="none" id="ParallelBZ2Reader::ParallelBZ2Reader-backto-ParallelBZ2Reader::BlockMap" style="stroke:#FFB000;stroke-width:1.0;"/><polygon fill="#FFB000" points="1900.7,57,1906.7,61,1912.7,57,1906.7,53,1900.7,57" style="stroke:#FFB000;stroke-width:1.0;"/><!--MD5=[52536540c83cc3a38496e10e49564b83]
@startuml

' bluegray cerulean-outline crt-amber materia-outline mimeograph cyborg
!theme crt-amber

'!pragma svek_trace on
/'
generate in your local folder two intermediate files:
    foo.dot : intermediate file in "dot" language provided to GraphViz
    foo.svg : intermediate result file which is going to be parsed by PlantUML to retrieve element positions.
'/

'skinparam backgroundColor #121212
skinparam backgroundColor #000000

/' Use the UML symbols +-#~ for visibility instead of PlantUML-specific icons '/
skinparam classAttributeIconSize 0

set namespaceSeparator ::

hide empty
hide members


'left to right direction
'top to bottom direction

skinparam linetype ortho
'skinparam linetype polyline

/'
"linetype ortho" looks the best imo, but it does not work at all with arrow labels
as they are place too far away to be meaningful. Same bug applies to polyline. See:
  https://forum.plantuml.net/1608/is-it-possible-to-only-use-straight-lines-in-a-class-diagram
  https://crashedmind.github.io/PlantUMLHitchhikersGuide/layout/layout.html#linetype-polyline-ortho
  https://github.com/plantuml/plantuml/issues/149
'/


together {
abstract class FileReader {
    '+~FileReader()
    +{abstract} closed() : bool {query}
    +{abstract} eof() : bool {query}
    +{abstract} seekable() : bool {query}
    +{abstract} fileno() : int {query}
    +{abstract} seek(long long int offset, int origin) : size_t
    +{abstract} size() : size_t {query}
    +{abstract} tell() : size_t {query}
    +{abstract} close() : void
}


class BitReader {
    -{static} determineFileSize(int fileNumber) : size_t
    -{static} determineSeekable(int fileNumber) : size_t
    +{static} fdFilePath(int fileDescriptor) : std::string
    ..
    +BitReader(std::string filePath)
    +BitReader(int fileDescriptor)
    +BitReader(const uint8_t* buffer, size_t size, uint8_t offsetBits)
    +BitReader(std::vector<uint8_t>&& buffer, uint8_t offsetBits)
    +BitReader(BitReader&& other)
    +BitReader(const BitReader& other)
    '+~BitReader()
    +read(char* outputBuffer, size_t nBytesToRead) : size_t
    +seek(long long int offsetBits, int origin) : size_t
    -seekInternal(long long int offsetBits, int origin) : size_t
    +read(uint8_t bitsWanted) : uint32_t
    +read() : uint32_t
    +read64(uint8_t bitsWanted) : uint64_t
    +close() : void
    -readSafe(uint8_t) : uint32_t
    -init() : void
    -refillBuffer() : void
    .. queries ..
    +fp() : FILE* {query}
    +closed() : bool {query}
    +eof() : bool {query}
    +seekable() : bool {query}
    +fileno() : int {query}
    +size() : size_t {query}
    +tell() : size_t {query}
    +buffer() : std::vector<std::uint8_t>& {query}
    - -
    -{static} nLowestBitsSet(uint8_t nBitsSet) : T
    -{static} nLowestBitsSet() : T
    +{static} NO_FILE : int
    +{static} IOBUF_SIZE : size_t
    ..
    -m_filePath : std::string
    +m_readBitsCount : size_t
    -m_fileDescriptor : int
    -m_lastReadSuccessful : bool
    -m_inbuf : std::vector<uint8_t>
    +m_inbufBits : uint32_t
    -m_inbufPos : uint32_t
    +m_inbufBitCount : uint8_t
    -m_offsetBits : uint8_t
    -m_file : unique_file_ptr
}

class NamedFileReader {
}

class SharedFileReader {
}

class PythonFileReader {
}

FileReader <|- - BZ2ReaderInterface
FileReader <|- - BitReader
FileReader <|- - NamedFileReader
FileReader <|- - SharedFileReader
FileReader <|- - PythonFileReader

SharedFileReader *- - FileReader
BitReader *- - SharedFileReader

abstract class BZ2ReaderInterface {
    '+~BZ2ReaderInterface()
    +{abstract} blockOffsetsComplete() : bool {query}
    +{abstract} read(const int outputFileDescriptor, char* const outputBuffer, const size_t nBytesToRead) : size_t
    +{abstract} tellCompressed() : size_t {query}
    +{abstract} availableBlockOffsets() : std::map<size_t , size_t> {query}
    +{abstract} blockOffsets() : std::map<size_t , size_t>
    +{abstract} setBlockOffsets(std::map<size_t, size_t> offsets) : void
}
}


namespace bzip2 {
    class Block {
        +Block()
        +Block(Block& &)
        +Block(BitReader& bitReader)
        +operator=(Block& &) : Block&
        +bitReader() : BitReader&
        +eof() : bool {query}
        +eos() : bool {query}
        +readBlockData() : void
        ..
        -getBits() : uint32_t
        -getBits(uint8_t nBits) : uint32_t
        -readBlockHeader() : void
        - -
        +bwdata : BurrowsWheelerTransformData
        +isRandomized : bool
        +groupCount : int
        +encodedOffsetInBits : size_t
        +encodedSizeInBits : size_t
        +groups : std::array<GroupData, MAX_GROUPS>
        +selectors : std::array<char, 32768>
        +mtfSymbol : std::array<uint8_t, 256>
        +symbolToByte : std::array<uint8_t, 256>
        +selectors_used : uint16_t
        +magicBytes : uint64_t
        +symbolCount : unsigned int
        ..
        -m_bitReader : BitReader*
        -m_atEndOfFile : bool
        -m_atEndOfStream : bool
    }

    class BurrowsWheelerTransformData {
        +prepare() : void
        +decodeBlock(const uint32_t nMaxBytesToDecode, char* outputBuffer) : uint32_t
        - -
        +writeCount : int
        +writeCurrent : int
        +writePos : int
        +writeRun : int
        +byteCount : std::array<int, 256>
        +dbuf : std::vector<uint32_t>
        +dataCRC : uint32_t
        +headerCRC : uint32_t
        +origPtr : uint32_t
    }

    class GroupData {
        +limit : std::array<int, MAX_HUFCODE_BITS + 1>
        +base : std::array<int, MAX_HUFCODE_BITS>
        +permute : std::array<uint16_t, MAX_SYMBOLS>
        +maxLen : uint8_t
        +minLen : uint8_t
    }

    Block *- - GroupData
    Block +- - - BurrowsWheelerTransformData
    Block o- - - ::BitReader
}


/'
class BZ2Reader {
    +BZ2Reader(const std::string& filePath)
    +BZ2Reader(int fileDescriptor)
    +BZ2Reader(const char* bz2Data, const size_t size)
    -readBlockHeader(size_t bitsOffset) : BlockHeader
    +blockOffsetsComplete() : bool {query}
    +closed() : bool {query}
    +eof() : bool {query}
    +seekable() : bool {query}
    +fileno() : int {query}
    -decodeStream(int outputFileDescriptor, char* outputBuffer, size_t nMaxBytesToDecode) : size_t
    -flushOutputBuffer(int outputFileDescriptor, char* outputBuffer, size_t maxBytesToFlush) : size_t
    +read(const int outputFileDescriptor, char* const outputBuffer, const size_t nBytesToRead) : size_t
    +seek(long long int offset, int origin) : size_t
    +size() : size_t {query}
    +tell() : size_t {query}
    +tellCompressed() : size_t {query}
    +{static} IOBUF_SIZE : static constexpr size_t
    +availableBlockOffsets() : std::map<size_t , size_t> {query}
    +blockOffsets() : std::map<size_t , size_t>
    +crc() : uint32_t {query}
    +close() : void
    #readBzip2Header() : void
    +setBlockOffsets(std::map<size_t, size_t> offsets) : void
    - -
    #m_bitReader : BitReader
    -m_lastHeader : Block
    #m_atEndOfFile : bool
    #m_blockToDataOffsetsComplete : bool
    #m_currentPosition : size_t
    -m_decodedBufferPos : size_t
    -m_decodedBytesCount : size_t
    #m_blockToDataOffsets : std::map<size_t, size_t>
    -m_decodedBuffer : std::vector<char>
    #m_calculatedStreamCRC : uint32_t
    #m_streamCRC : uint32_t
    #m_blockSize100k : uint8_t
}

BZ2ReaderInterface <|- - BZ2Reader
BZ2Reader *- - - BitReader
BZ2Reader *- - bzip2::Block
'/


together {
namespace CacheStrategy {
    abstract class CacheStrategy <Index> {
        '+~CacheStrategy()
        +{abstract} evict() : std::optional<Index>
        +{abstract} touch(Index index) : void
    }

    class LeastRecentlyUsed <Index> {
        +LeastRecentlyUsed()
        +evict() : std::optional<Index>
        +touch(Index index) : void
        - -
        -m_lastUsage : std::map<Index, size_t>
    }

    CacheStrategy <|- - LeastRecentlyUsed
}


class Cache <Key, Value, CacheStrategy> {
    +Cache(size_t maxCacheSize)
    +test(const Key& key) : bool {query}
    +capacity() : size_t {query}
    +hits() : size_t {query}
    +misses() : size_t {query}
    +size() : size_t {query}
    +get(const Key& key) : std::optional<Value>
    +insert(Key key, Value value) : void
    +resetStatistics() : void
    +touch(const Key& key) : void
    - -
    -m_cacheStrategy : CacheStrategy
    -m_hits : size_t
    -m_misses : size_t
    -m_maxCacheSize : size_t const
    -m_cache : std::map<Key, Value>
}

Cache *- - CacheStrategy::CacheStrategy
}

class JoiningThread {
    +JoiningThread(T_Args&& ... args)
    +JoiningThread(JoiningThread& &)
    '+~JoiningThread()
    +joinable() : bool {query}
    +get_id() : std::thread::id {query}
    +join() : void
    - -
    -m_thread : std::thread
}


namespace ThreadPool {
    class ThreadPool {
        +ThreadPool(unsigned int nThreads)
        +future<decltype(std::declval<T_Functor>( ) ( ) )>submitTask ( T_Functor task)
        '+~ThreadPool()
        +size() : size_t {query}
        +unprocessedTasksCount() : size_t {query}
        -workerMain() : void
        - -
        -m_mutex : mutable std::mutex
        -m_threadPoolRunning : std::atomic<bool>
        -m_pingWorkers : std::condition_variable
        -m_tasks : std::deque<PackagedTaskWrapper>
        -m_threads : std::vector<JoiningThread>
    }


    class PackagedTaskWrapper {
        +PackagedTaskWrapper(T_Functor&& functor)
        +operator()() : void
        - -
        -m_impl : std::unique_ptr<BaseFunctor>
    }


    abstract class BaseFunctor {
        '+~BaseFunctor()
        +{abstract} operator()() : void
    }


    class SpecializedFunctor <Functor> {
        +SpecializedFunctor(T_Functor&& functor)
        +operator()() : void
        - -
        -m_functor : T_Functor
    }


    ThreadPool +- - PackagedTaskWrapper
    PackagedTaskWrapper +- - BaseFunctor
    PackagedTaskWrapper +- - SpecializedFunctor

    BaseFunctor <|- - SpecializedFunctor

    ThreadPool *- - - "1..*" ::JoiningThread
}


together {
class BitStringFinder <bitStringSize : uint8_t> {
    +BitStringFinder(BitStringFinder& &)
    +BitStringFinder(std::string const& filePath, uint64_t bitStringToFind, size_t fileBufferSizeBytes)
    +BitStringFinder(int fileDescriptor, uint64_t bitStringToFind, size_t fileBufferSizeBytes)
    +BitStringFinder(const char* buffer, size_t size, uint64_t bitStringToFind)
    #BitStringFinder(uint64_t bitStringToFind, size_t fileBufferSizeBytes, std::string const& filePath)
    '+~BitStringFinder()
    +{static} createdShiftedBitStringLUT(uint64_t bitString, bool includeLastFullyShifted) : ShiftedLUTTable
    +eof() : bool {query}
    +seekable() : bool {query}
    #m_fileChunksInBytes : const size_t
    #m_bitStringToFind : const uint64_t
    #m_movingBitsToKeep : const uint8_t
    #m_movingBytesToKeep : const uint8_t
    #m_file : const unique_file_ptr
    +{static} mask(uint8_t length) : constexpr T
    +find() : size_t
    +{static} findBitString(const uint8_t* buffer, size_t bufferSize, uint64_t bitString, uint8_t firstBitsToIgnore) : size_t
    #m_bufferBitsRead : size_t
    #m_nTotalBytesRead : size_t
    #refillBuffer() : size_t
    +{static} fdFilePath(int fileDescriptor) : std::string
    #m_buffer : std::vector<char>
    #m_movingWindow : uint64_t
}

class ParallelBitStringFinder <bitStringSize : uint8_t> {
    +ParallelBitStringFinder(std::string const& filePath, uint64_t bitStringToFind, size_t parallelization, size_t requestedBytes, size_t fileBufferSizeBytes)
    +ParallelBitStringFinder(int fileDescriptor, uint64_t bitStringToFind, size_t parallelization, size_t requestedBytes, size_t fileBufferSizeBytes)
    +ParallelBitStringFinder(const char* buffer, size_t size, uint64_t bitStringToFind)
    +~ParallelBitStringFinder()
    -{static} chunkSize(size_t const fileBufferSizeBytes, size_t const requestedBytes, size_t const parallelization) : constexpr size_t
    +find() : size_t
    -{static} workerMain(char const* const buffer, size_t const bufferSizeInBytes, uint8_t const firstBitsToIgnore, uint64_t const bitStringToFind, size_t const bitOffsetToAdd, ThreadResults result) : void
    - -
    -m_threadPool : ThreadPool
    -m_requestedBytes : const size_t
    -m_threadResults : std::list<ThreadResults>
}

BitStringFinder <|- - ParallelBitStringFinder
BitStringFinder *- - FileReader
ParallelBitStringFinder *- - - ThreadPool::ThreadPool
ParallelBitStringFinder *- - FileReader


class ThreadResults {
    +changed : std::condition_variable
    +future : std::future<void>
    +mutex : std::mutex
    +foundOffsets : std::queue<size_t>
}
}

/'
class ThreadSafeOutput {
    +ThreadSafeOutput()
    +string() {query}
    +operator<<(const T& value) : ThreadSafeOutput&
    +str() : std::string {query}
    - -
    -m_out : std::stringstream
}
'/

ParallelBitStringFinder +- - ThreadResults


namespace FetchingStrategy {
    class FetchNext {
        -{static} MEMORY_SIZE : static constexpr size_t
        +prefetch(size_t maxAmountToPrefetch) : std::vector<size_t> {query}
        +fetch(size_t index) : void
        - -
        -m_lastFetched : std::optional<size_t>
    }

    class FetchNextSmart {
        -{static} MEMORY_SIZE : static constexpr size_t
        +prefetch(size_t maxAmountToPrefetch) : std::vector<size_t> {query}
        +fetch(size_t index) : void
        - -
        -m_previousIndexes : std::deque<size_t>
    }

    abstract class FetchingStrategy {
        '+~FetchingStrategy()
        +{abstract} prefetch(size_t maxAmountToPrefetch) : std::vector<size_t> {query}
        +{abstract} fetch(size_t index) : void
    }

    FetchingStrategy <|- - FetchNext
    FetchingStrategy <|- - - FetchNextSmart
}


namespace ParallelBZ2Reader{
    class StreamedResults <Value> {
        +results() : ResultsView {query}
        +finalized() : bool {query}
        +size() : size_t {query}
        +get(size_t position, double timeoutInSeconds) : std::optional<Value> {query}
        +finalize(std::optional<size_t> resultsCount) : void
        +push(Value value) : void
        +setResults(deque<Value> results) : void
        - -
        -m_results : deque<Value>
        -m_changed : mutable std::condition_variable
        -m_mutex : mutable std::mutex
        -m_finalized : std::atomic<bool>
    }


    class ResultsView {
        +ResultsView(deque<Value> results, std::mutex* mutex)
        +results() : Values& {query}
        - -
        -m_results : deque<Value>
        -m_lock : std::scoped_lock<std::mutex>const
    }


    StreamedResults +- - ResultsView


    ' class BlockFetcher <template<typename FetchingStrategy=FetchingStrategy::FetchNextSmart>> {
    class BlockFetcher <FetchingStrategy> {
        +BlockFetcher(BitReader bitReader, std::shared_ptr<BlockFinder> blockFinder, size_t parallelization)
    '    +~BlockFetcher()
        +readBlockHeader(size_t blockOffset) : BlockHeaderData {query}
        +get(size_t blockOffset, std::optional<size_t> dataBlockIndex) : std::shared_ptr<BlockData>
        ..
        -decodeBlock(size_t blockOffset) : BlockData {query}
        - -
        -m_cache : Cache<size_t, std::shared_ptr<BlockData>>
        -m_fetchingStrategy : FetchingStrategy
        -m_threadPool : ThreadPool
        -m_bitReader : const BitReader
        -m_parallelization : const size_t
        -m_blockFinder : const std::shared_ptr<BlockFinder>
        -m_analyticsMutex : mutable std::mutex
        -m_cancelThreadsCondition : std::condition_variable
        -m_prefetching : std::map<size_t, std::future<BlockData>>
        -m_blockSize100k : uint8_t
    }


    class BlockFinder {
        +BlockFinder(int fileDescriptor, size_t parallelization)
        +BlockFinder(char const* buffer, size_t size, size_t parallelization)
        +BlockFinder(std::string const& filePath, size_t parallelization)
    '    +~BlockFinder()
        +finalized() : bool {query}
        +find(size_t encodedBlockOffsetInBits) : size_t {query}
        +size() : size_t {query}
        +get(size_t blockNumber, double timeoutInSeconds) : std::optional<size_t>
        +finalize(std::optional<size_t> blockCount) : void
        +setBlockOffsets(StreamedResults<size_t>::Values blockOffsets) : void
        +startThreads() : void
        +stopThreads() : void
        ..
        -blockFinderMain() : void
        - -
        -m_bitStringFinder : std::unique_ptr<BitStringFinder>
        -m_blockFinder : std::unique_ptr<JoiningThread>
        -m_blockOffsets : StreamedResults<size_t>
        -m_prefetchCount : const size_t
        -m_mutex : mutable std::mutex
        -m_changed : std::condition_variable
    }

    'BlockFinder *- - - "1" ::ParallelBitStringFinder
    BlockFinder *- - - ::ParallelBitStringFinder : <<bind>> \n <bitStringSize -> bzip2::MAGIC_BITS_SIZE>
    BlockFinder *- - ::JoiningThread
    BlockFinder *- - StreamedResults
    BlockFinder *- - - ::SharedFileReader
    ' : <<bind>> \n <Value -> size_t>

    class BlockMap {
        +BlockMap()
        +findDataOffset(size_t dataOffset) : BlockInfo {query}
        +finalized() : bool {query}
        +dataBlockCount() : size_t {query}
        +blockOffsets() : std::map<size_t , size_t> {query}
        +back() : std::pair<size_t , size_t> {query}
        +finalize() : void
        +push(size_t encodedBlockOffset, size_t encodedSize, size_t decodedSize) : void
        +setBlockOffsets(std::map<size_t, size_t>const& blockOffsets) : void
        - -
        -m_mutex : mutable std::mutex
        -m_eosBlocks : std::vector<size_t>
        -m_blockToDataOffsets : std::vector<std::pair<size_t, size_t>>
    }


    class BlockData {
        +data : std::vector<uint8_t>
    }


    class BlockHeaderData {
    }


    class BlockInfo {
        +contains(size_t dataOffset) : bool {query}
    }

    BlockFetcher *- - - ::BitReader
    BlockFetcher *- - BlockFinder
    BlockFetcher *- - - ::Cache
    BlockFetcher *- - - ::FetchingStrategy::FetchingStrategy
    BlockFetcher *- - - ::ThreadPool::ThreadPool
    BlockFetcher +- - BlockData
    BlockFetcher +- - BlockHeaderData
    BlockFetcher -left- -> ::bzip2::Block

    BlockMap +- - BlockInfo

    class ParallelBZ2Reader {
        +ParallelBZ2Reader(int fileDescriptor, size_t parallelization)
        +ParallelBZ2Reader(const char* bz2Data, const size_t size, size_t parallelization)
        +ParallelBZ2Reader(const std::string& filePath, size_t parallelization)
        +blockOffsetsComplete() : bool {query}
        +closed() : bool {query}
        +eof() : bool {query}
        +seekable() : bool {query}
        +fileno() : int {query}
        +read(const int outputFileDescriptor, char* const outputBuffer, const size_t nBytesToRead) : size_t
        +seek(long long int offset, int origin) : size_t
        +size() : size_t {query}
        +tell() : size_t {query}
        +tellCompressed() : size_t {query}
        +availableBlockOffsets() : std::map<size_t , size_t> {query}
        +blockOffsets() : std::map<size_t , size_t>
        +close() : void
        +joinThreads() : void
        +setBlockOffsets(std::map<size_t, size_t> offsets) : void
        ..
        -blockFetcher() : BlockFetcher&
        -blockFinder() : BlockFinder&
        -writeResult(int const outputFileDescriptor, char* const outputBuffer, char const* const dataToWrite, size_t const dataToWriteSize) : size_t
        -setBlockFinderOffsets(const std::map<size_t, size_t>& offsets) : void
        - -
        -m_bitReader : BitReader
        -m_atEndOfFile : bool
        -m_currentPosition : size_t
        -m_fetcherParallelization : size_t const
        -m_startBlockFinder : std::function<std::shared_ptr<BlockFinder>(void)>
        -m_blockFinder : std::shared_ptr<BlockFinder>
        -m_blockFetcher : std::unique_ptr<BlockFetcher>
    }

    ::BZ2ReaderInterface <|- - ParallelBZ2Reader
    ParallelBZ2Reader *- - - ::BitReader
    ParallelBZ2Reader *- - BlockFetcher
    ParallelBZ2Reader *- - BlockFinder
    ParallelBZ2Reader *- - BlockMap
}

/' Layouting tricks '/

@enduml

@startuml







<style>
  root {
    BackgroundColor #282828
    FontColor #FFB000
    FontName Verdana
    HyperLinkColor #FFCC00
    LineColor #FFB000
    LineThickness 1
    Margin 5
  }
  box {
    LineStyle 12-18
    LineThickness 3
  }
  caption {
    LineThickness 0
  }
  footer {
    LineThickness 0
  }
  groupHeader {
    BackgroundColor #FFB000
    FontColor #282828
    FontStyle bold
  }
  header {
    LineThickness 0
  }
  node {
    MaximumWidth 300
  }
  referenceHeader {
    BackgroundColor #FFB000
    FontColor #282828
    FontStyle bold
  }
  separator {
    BackgroundColor #FFB000
    FontColor #282828
    FontStyle bold
  }
  title {
    FontSize 22
    LineThickness 0
  }
</style>

skinparam ArrowLollipopColor #FFB000
skinparam BackgroundColor #282828
skinparam DefaultFontName Verdana
skinparam DefaultMonospacedFontName Courier
skinparam LifelineStrategy solid
skinparam ParticipantPadding 10
skinparam SequenceLifeLineBorderColor #FFB000
skinparam Shadowing false
skinparam UseBetaStyle true

skinparam Activity {
  BackgroundColor #282828
  BarColor #FFB000
  BorderColor #FFB000
  FontColor #FFB000
  FontName Verdana
}
skinparam Boundary {
  FontColor #FFB000
}
skinparam Box {
  Padding 5
}
skinparam CircledCharacter {
  FontColor #282828
  FontName Courier
  Radius 9
}
skinparam Class {
  BackgroundColor #282828
  BorderColor #FFB000
  FontColor #FFB000
  FontName Verdana
}
skinparam ClassAttribute {
  FontColor #FFB000
  FontName Verdana
}
skinparam ClassStereotype {
  FontColor #FFB000
  FontName Verdana
}
skinparam Footer {
  FontColor #FFB000
  FontName Verdana
}
skinparam Header {
  FontColor #FFB000
  FontName Verdana
}
skinparam Hyperlink {
  Color #FFCC00
}
skinparam IconPackage {
  Color #FFB000
  BackgroundColor #282828
}
skinparam IconPrivate {
  Color #FFB000
  BackgroundColor #282828
}
skinparam IconProtected {
  Color #FFB000
  BackgroundColor #282828
}
skinparam IconPublic {
  Color #FFB000
  BackgroundColor #282828
}
skinparam Note {
  FontColor #FFB000
  FontName Verdana
}
skinparam Package {
  BorderColor #FFB000
  FontColor #FFB000
  FontName Verdana
}
skinparam State {
  BackgroundColor #282828
  BorderColor #FFB000
}
skinparam StereotypeA {
  BackgroundColor #FFB000
  BorderColor #FFB000
}
skinparam StereotypeC {
  BackgroundColor #FFB000
  BorderColor #FFB000
}
skinparam StereotypeE {
  BackgroundColor #FFB000
  BorderColor #FFB000
}
skinparam StereotypeI {
  BackgroundColor #FFB000
  BorderColor #FFB000
}
skinparam StereotypeN {
  BackgroundColor #FFB000
  BorderColor #FFB000
}
skinparam UseCaseStereoType {
  FontColor #FFB000
  FontName Verdana
}


skinparam backgroundColor #000000

skinparam classAttributeIconSize 0

set namespaceSeparator ::

hide empty
hide members



skinparam linetype ortho



together {
abstract class FileReader {
    +{abstract} closed() : bool {query}
    +{abstract} eof() : bool {query}
    +{abstract} seekable() : bool {query}
    +{abstract} fileno() : int {query}
    +{abstract} seek(long long int offset, int origin) : size_t
    +{abstract} size() : size_t {query}
    +{abstract} tell() : size_t {query}
    +{abstract} close() : void
}


class BitReader {
    -{static} determineFileSize(int fileNumber) : size_t
    -{static} determineSeekable(int fileNumber) : size_t
    +{static} fdFilePath(int fileDescriptor) : std::string
    ..
    +BitReader(std::string filePath)
    +BitReader(int fileDescriptor)
    +BitReader(const uint8_t* buffer, size_t size, uint8_t offsetBits)
    +BitReader(std::vector<uint8_t>&& buffer, uint8_t offsetBits)
    +BitReader(BitReader&& other)
    +BitReader(const BitReader& other)
    +read(char* outputBuffer, size_t nBytesToRead) : size_t
    +seek(long long int offsetBits, int origin) : size_t
    -seekInternal(long long int offsetBits, int origin) : size_t
    +read(uint8_t bitsWanted) : uint32_t
    +read() : uint32_t
    +read64(uint8_t bitsWanted) : uint64_t
    +close() : void
    -readSafe(uint8_t) : uint32_t
    -init() : void
    -refillBuffer() : void
    .. queries ..
    +fp() : FILE* {query}
    +closed() : bool {query}
    +eof() : bool {query}
    +seekable() : bool {query}
    +fileno() : int {query}
    +size() : size_t {query}
    +tell() : size_t {query}
    +buffer() : std::vector<std::uint8_t>& {query}
    - -
    -{static} nLowestBitsSet(uint8_t nBitsSet) : T
    -{static} nLowestBitsSet() : T
    +{static} NO_FILE : int
    +{static} IOBUF_SIZE : size_t
    ..
    -m_filePath : std::string
    +m_readBitsCount : size_t
    -m_fileDescriptor : int
    -m_lastReadSuccessful : bool
    -m_inbuf : std::vector<uint8_t>
    +m_inbufBits : uint32_t
    -m_inbufPos : uint32_t
    +m_inbufBitCount : uint8_t
    -m_offsetBits : uint8_t
    -m_file : unique_file_ptr
}

class NamedFileReader {
}

class SharedFileReader {
}

class PythonFileReader {
}

FileReader <|- - BZ2ReaderInterface
FileReader <|- - BitReader
FileReader <|- - NamedFileReader
FileReader <|- - SharedFileReader
FileReader <|- - PythonFileReader

SharedFileReader *- - FileReader
BitReader *- - SharedFileReader

abstract class BZ2ReaderInterface {
    +{abstract} blockOffsetsComplete() : bool {query}
    +{abstract} read(const int outputFileDescriptor, char* const outputBuffer, const size_t nBytesToRead) : size_t
    +{abstract} tellCompressed() : size_t {query}
    +{abstract} availableBlockOffsets() : std::map<size_t , size_t> {query}
    +{abstract} blockOffsets() : std::map<size_t , size_t>
    +{abstract} setBlockOffsets(std::map<size_t, size_t> offsets) : void
}
}


namespace bzip2 {
    class Block {
        +Block()
        +Block(Block& &)
        +Block(BitReader& bitReader)
        +operator=(Block& &) : Block&
        +bitReader() : BitReader&
        +eof() : bool {query}
        +eos() : bool {query}
        +readBlockData() : void
        ..
        -getBits() : uint32_t
        -getBits(uint8_t nBits) : uint32_t
        -readBlockHeader() : void
        - -
        +bwdata : BurrowsWheelerTransformData
        +isRandomized : bool
        +groupCount : int
        +encodedOffsetInBits : size_t
        +encodedSizeInBits : size_t
        +groups : std::array<GroupData, MAX_GROUPS>
        +selectors : std::array<char, 32768>
        +mtfSymbol : std::array<uint8_t, 256>
        +symbolToByte : std::array<uint8_t, 256>
        +selectors_used : uint16_t
        +magicBytes : uint64_t
        +symbolCount : unsigned int
        ..
        -m_bitReader : BitReader*
        -m_atEndOfFile : bool
        -m_atEndOfStream : bool
    }

    class BurrowsWheelerTransformData {
        +prepare() : void
        +decodeBlock(const uint32_t nMaxBytesToDecode, char* outputBuffer) : uint32_t
        - -
        +writeCount : int
        +writeCurrent : int
        +writePos : int
        +writeRun : int
        +byteCount : std::array<int, 256>
        +dbuf : std::vector<uint32_t>
        +dataCRC : uint32_t
        +headerCRC : uint32_t
        +origPtr : uint32_t
    }

    class GroupData {
        +limit : std::array<int, MAX_HUFCODE_BITS + 1>
        +base : std::array<int, MAX_HUFCODE_BITS>
        +permute : std::array<uint16_t, MAX_SYMBOLS>
        +maxLen : uint8_t
        +minLen : uint8_t
    }

    Block *- - GroupData
    Block +- - - BurrowsWheelerTransformData
    Block o- - - ::BitReader
}




together {
namespace CacheStrategy {
    abstract class CacheStrategy <Index> {
        +{abstract} evict() : std::optional<Index>
        +{abstract} touch(Index index) : void
    }

    class LeastRecentlyUsed <Index> {
        +LeastRecentlyUsed()
        +evict() : std::optional<Index>
        +touch(Index index) : void
        - -
        -m_lastUsage : std::map<Index, size_t>
    }

    CacheStrategy <|- - LeastRecentlyUsed
}


class Cache <Key, Value, CacheStrategy> {
    +Cache(size_t maxCacheSize)
    +test(const Key& key) : bool {query}
    +capacity() : size_t {query}
    +hits() : size_t {query}
    +misses() : size_t {query}
    +size() : size_t {query}
    +get(const Key& key) : std::optional<Value>
    +insert(Key key, Value value) : void
    +resetStatistics() : void
    +touch(const Key& key) : void
    - -
    -m_cacheStrategy : CacheStrategy
    -m_hits : size_t
    -m_misses : size_t
    -m_maxCacheSize : size_t const
    -m_cache : std::map<Key, Value>
}

Cache *- - CacheStrategy::CacheStrategy
}

class JoiningThread {
    +JoiningThread(T_Args&& ... args)
    +JoiningThread(JoiningThread& &)
    +joinable() : bool {query}
    +get_id() : std::thread::id {query}
    +join() : void
    - -
    -m_thread : std::thread
}


namespace ThreadPool {
    class ThreadPool {
        +ThreadPool(unsigned int nThreads)
        +future<decltype(std::declval<T_Functor>( ) ( ) )>submitTask ( T_Functor task)
        +size() : size_t {query}
        +unprocessedTasksCount() : size_t {query}
        -workerMain() : void
        - -
        -m_mutex : mutable std::mutex
        -m_threadPoolRunning : std::atomic<bool>
        -m_pingWorkers : std::condition_variable
        -m_tasks : std::deque<PackagedTaskWrapper>
        -m_threads : std::vector<JoiningThread>
    }


    class PackagedTaskWrapper {
        +PackagedTaskWrapper(T_Functor&& functor)
        +operator()() : void
        - -
        -m_impl : std::unique_ptr<BaseFunctor>
    }


    abstract class BaseFunctor {
        +{abstract} operator()() : void
    }


    class SpecializedFunctor <Functor> {
        +SpecializedFunctor(T_Functor&& functor)
        +operator()() : void
        - -
        -m_functor : T_Functor
    }


    ThreadPool +- - PackagedTaskWrapper
    PackagedTaskWrapper +- - BaseFunctor
    PackagedTaskWrapper +- - SpecializedFunctor

    BaseFunctor <|- - SpecializedFunctor

    ThreadPool *- - - "1..*" ::JoiningThread
}


together {
class BitStringFinder <bitStringSize : uint8_t> {
    +BitStringFinder(BitStringFinder& &)
    +BitStringFinder(std::string const& filePath, uint64_t bitStringToFind, size_t fileBufferSizeBytes)
    +BitStringFinder(int fileDescriptor, uint64_t bitStringToFind, size_t fileBufferSizeBytes)
    +BitStringFinder(const char* buffer, size_t size, uint64_t bitStringToFind)
    #BitStringFinder(uint64_t bitStringToFind, size_t fileBufferSizeBytes, std::string const& filePath)
    +{static} createdShiftedBitStringLUT(uint64_t bitString, bool includeLastFullyShifted) : ShiftedLUTTable
    +eof() : bool {query}
    +seekable() : bool {query}
    #m_fileChunksInBytes : const size_t
    #m_bitStringToFind : const uint64_t
    #m_movingBitsToKeep : const uint8_t
    #m_movingBytesToKeep : const uint8_t
    #m_file : const unique_file_ptr
    +{static} mask(uint8_t length) : constexpr T
    +find() : size_t
    +{static} findBitString(const uint8_t* buffer, size_t bufferSize, uint64_t bitString, uint8_t firstBitsToIgnore) : size_t
    #m_bufferBitsRead : size_t
    #m_nTotalBytesRead : size_t
    #refillBuffer() : size_t
    +{static} fdFilePath(int fileDescriptor) : std::string
    #m_buffer : std::vector<char>
    #m_movingWindow : uint64_t
}

class ParallelBitStringFinder <bitStringSize : uint8_t> {
    +ParallelBitStringFinder(std::string const& filePath, uint64_t bitStringToFind, size_t parallelization, size_t requestedBytes, size_t fileBufferSizeBytes)
    +ParallelBitStringFinder(int fileDescriptor, uint64_t bitStringToFind, size_t parallelization, size_t requestedBytes, size_t fileBufferSizeBytes)
    +ParallelBitStringFinder(const char* buffer, size_t size, uint64_t bitStringToFind)
    +~ParallelBitStringFinder()
    -{static} chunkSize(size_t const fileBufferSizeBytes, size_t const requestedBytes, size_t const parallelization) : constexpr size_t
    +find() : size_t
    -{static} workerMain(char const* const buffer, size_t const bufferSizeInBytes, uint8_t const firstBitsToIgnore, uint64_t const bitStringToFind, size_t const bitOffsetToAdd, ThreadResults result) : void
    - -
    -m_threadPool : ThreadPool
    -m_requestedBytes : const size_t
    -m_threadResults : std::list<ThreadResults>
}

BitStringFinder <|- - ParallelBitStringFinder
BitStringFinder *- - FileReader
ParallelBitStringFinder *- - - ThreadPool::ThreadPool
ParallelBitStringFinder *- - FileReader


class ThreadResults {
    +changed : std::condition_variable
    +future : std::future<void>
    +mutex : std::mutex
    +foundOffsets : std::queue<size_t>
}
}


ParallelBitStringFinder +- - ThreadResults


namespace FetchingStrategy {
    class FetchNext {
        -{static} MEMORY_SIZE : static constexpr size_t
        +prefetch(size_t maxAmountToPrefetch) : std::vector<size_t> {query}
        +fetch(size_t index) : void
        - -
        -m_lastFetched : std::optional<size_t>
    }

    class FetchNextSmart {
        -{static} MEMORY_SIZE : static constexpr size_t
        +prefetch(size_t maxAmountToPrefetch) : std::vector<size_t> {query}
        +fetch(size_t index) : void
        - -
        -m_previousIndexes : std::deque<size_t>
    }

    abstract class FetchingStrategy {
        +{abstract} prefetch(size_t maxAmountToPrefetch) : std::vector<size_t> {query}
        +{abstract} fetch(size_t index) : void
    }

    FetchingStrategy <|- - FetchNext
    FetchingStrategy <|- - - FetchNextSmart
}


namespace ParallelBZ2Reader{
    class StreamedResults <Value> {
        +results() : ResultsView {query}
        +finalized() : bool {query}
        +size() : size_t {query}
        +get(size_t position, double timeoutInSeconds) : std::optional<Value> {query}
        +finalize(std::optional<size_t> resultsCount) : void
        +push(Value value) : void
        +setResults(deque<Value> results) : void
        - -
        -m_results : deque<Value>
        -m_changed : mutable std::condition_variable
        -m_mutex : mutable std::mutex
        -m_finalized : std::atomic<bool>
    }


    class ResultsView {
        +ResultsView(deque<Value> results, std::mutex* mutex)
        +results() : Values& {query}
        - -
        -m_results : deque<Value>
        -m_lock : std::scoped_lock<std::mutex>const
    }


    StreamedResults +- - ResultsView


    class BlockFetcher <FetchingStrategy> {
        +BlockFetcher(BitReader bitReader, std::shared_ptr<BlockFinder> blockFinder, size_t parallelization)
        +readBlockHeader(size_t blockOffset) : BlockHeaderData {query}
        +get(size_t blockOffset, std::optional<size_t> dataBlockIndex) : std::shared_ptr<BlockData>
        ..
        -decodeBlock(size_t blockOffset) : BlockData {query}
        - -
        -m_cache : Cache<size_t, std::shared_ptr<BlockData>>
        -m_fetchingStrategy : FetchingStrategy
        -m_threadPool : ThreadPool
        -m_bitReader : const BitReader
        -m_parallelization : const size_t
        -m_blockFinder : const std::shared_ptr<BlockFinder>
        -m_analyticsMutex : mutable std::mutex
        -m_cancelThreadsCondition : std::condition_variable
        -m_prefetching : std::map<size_t, std::future<BlockData>>
        -m_blockSize100k : uint8_t
    }


    class BlockFinder {
        +BlockFinder(int fileDescriptor, size_t parallelization)
        +BlockFinder(char const* buffer, size_t size, size_t parallelization)
        +BlockFinder(std::string const& filePath, size_t parallelization)
        +finalized() : bool {query}
        +find(size_t encodedBlockOffsetInBits) : size_t {query}
        +size() : size_t {query}
        +get(size_t blockNumber, double timeoutInSeconds) : std::optional<size_t>
        +finalize(std::optional<size_t> blockCount) : void
        +setBlockOffsets(StreamedResults<size_t>::Values blockOffsets) : void
        +startThreads() : void
        +stopThreads() : void
        ..
        -blockFinderMain() : void
        - -
        -m_bitStringFinder : std::unique_ptr<BitStringFinder>
        -m_blockFinder : std::unique_ptr<JoiningThread>
        -m_blockOffsets : StreamedResults<size_t>
        -m_prefetchCount : const size_t
        -m_mutex : mutable std::mutex
        -m_changed : std::condition_variable
    }

    BlockFinder *- - - ::ParallelBitStringFinder : <<bind>> \n <bitStringSize -> bzip2::MAGIC_BITS_SIZE>
    BlockFinder *- - ::JoiningThread
    BlockFinder *- - StreamedResults
    BlockFinder *- - - ::SharedFileReader

    class BlockMap {
        +BlockMap()
        +findDataOffset(size_t dataOffset) : BlockInfo {query}
        +finalized() : bool {query}
        +dataBlockCount() : size_t {query}
        +blockOffsets() : std::map<size_t , size_t> {query}
        +back() : std::pair<size_t , size_t> {query}
        +finalize() : void
        +push(size_t encodedBlockOffset, size_t encodedSize, size_t decodedSize) : void
        +setBlockOffsets(std::map<size_t, size_t>const& blockOffsets) : void
        - -
        -m_mutex : mutable std::mutex
        -m_eosBlocks : std::vector<size_t>
        -m_blockToDataOffsets : std::vector<std::pair<size_t, size_t>>
    }


    class BlockData {
        +data : std::vector<uint8_t>
    }


    class BlockHeaderData {
    }


    class BlockInfo {
        +contains(size_t dataOffset) : bool {query}
    }

    BlockFetcher *- - - ::BitReader
    BlockFetcher *- - BlockFinder
    BlockFetcher *- - - ::Cache
    BlockFetcher *- - - ::FetchingStrategy::FetchingStrategy
    BlockFetcher *- - - ::ThreadPool::ThreadPool
    BlockFetcher +- - BlockData
    BlockFetcher +- - BlockHeaderData
    BlockFetcher -left- -> ::bzip2::Block

    BlockMap +- - BlockInfo

    class ParallelBZ2Reader {
        +ParallelBZ2Reader(int fileDescriptor, size_t parallelization)
        +ParallelBZ2Reader(const char* bz2Data, const size_t size, size_t parallelization)
        +ParallelBZ2Reader(const std::string& filePath, size_t parallelization)
        +blockOffsetsComplete() : bool {query}
        +closed() : bool {query}
        +eof() : bool {query}
        +seekable() : bool {query}
        +fileno() : int {query}
        +read(const int outputFileDescriptor, char* const outputBuffer, const size_t nBytesToRead) : size_t
        +seek(long long int offset, int origin) : size_t
        +size() : size_t {query}
        +tell() : size_t {query}
        +tellCompressed() : size_t {query}
        +availableBlockOffsets() : std::map<size_t , size_t> {query}
        +blockOffsets() : std::map<size_t , size_t>
        +close() : void
        +joinThreads() : void
        +setBlockOffsets(std::map<size_t, size_t> offsets) : void
        ..
        -blockFetcher() : BlockFetcher&
        -blockFinder() : BlockFinder&
        -writeResult(int const outputFileDescriptor, char* const outputBuffer, char const* const dataToWrite, size_t const dataToWriteSize) : size_t
        -setBlockFinderOffsets(const std::map<size_t, size_t>& offsets) : void
        - -
        -m_bitReader : BitReader
        -m_atEndOfFile : bool
        -m_currentPosition : size_t
        -m_fetcherParallelization : size_t const
        -m_startBlockFinder : std::function<std::shared_ptr<BlockFinder>(void)>
        -m_blockFinder : std::shared_ptr<BlockFinder>
        -m_blockFetcher : std::unique_ptr<BlockFetcher>
    }

    ::BZ2ReaderInterface <|- - ParallelBZ2Reader
    ParallelBZ2Reader *- - - ::BitReader
    ParallelBZ2Reader *- - BlockFetcher
    ParallelBZ2Reader *- - BlockFinder
    ParallelBZ2Reader *- - BlockMap
}


@enduml

PlantUML version 1.2021.8(Sat Jun 26 10:20:59 CEST 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>