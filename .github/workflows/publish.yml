name: Publish to PyPI

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  Deploy-Wheels:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        # manylinux1 is not supported anymore because it won't compile C++17 code
        manylinux-image: [manylinux2010, manylinux2014]
        exclude:
          - os: macos-latest
            manylinux-image: manylinux2010
          - os: windows-latest
            manylinux-image: manylinux2010

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install Dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install --upgrade-strategy eager --upgrade cython twine cibuildwheel

    - name: Build Tarball
      if: matrix.manylinux-image == 'manylinux_2014' && matrix.os == 'ubuntu-latest'
      run: python3 setup.py sdist

    - name: Build Wheels
      env:
        CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux-image }}
        CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux-image }}
      run: python -m cibuildwheel --output-dir dist

    - name: Check Wheels
      run: twine check dist/*

    - name: Publish to PyPI
      env:
        TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
      run: twine upload --skip-existing -u __token__ dist/*


  Deploy-Tarball:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install Dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install --upgrade-strategy eager --upgrade setuptools twine

    - name: Create Tarball
      run: python3 setup.py sdist

    - name: Check Wheels
      run: twine check dist/*

    - name: Publish to PyPI
      env:
        TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
      run: twine upload --skip-existing -u __token__ dist/*


  Deploy-Conda:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v2

    - uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true

    - name: Fix macOS CommandLineTools Bug
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        # See test.yml workflow for explanation but in short: conda build only works with the older SDK installed.
        wget https://github.com/phracker/MacOSX-SDKs/releases/download/10.13/MacOSX10.9.sdk.tar.xz
        tar -xf MacOSX10.9.sdk.tar.xz
        cat <<EOF >> conda/conda_build_config.yaml
        CONDA_BUILD_SYSROOT:
          - $PWD/MacOSX10.9.sdk
        EOF

    - name: Build Conda Packages
      # Bash shells do not use ~/.profile or ~/.bashrc so these shells need to be explicitely declared as shell:
      # bash -l {0} on steps that need to be properly activated
      shell: bash -l {0}
      env:
        ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
      run: |
        conda install conda-build anaconda-client conda-verify
        conda config --set anaconda_upload yes
        cd conda
        conda build --token "$ANACONDA_TOKEN" .
