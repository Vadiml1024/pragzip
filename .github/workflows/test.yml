name: tests

on: [push, pull_request]

jobs:
  Code-Checks:
    name: Code Checks
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Install Dependencies
      run: |
        sudo apt-get -y install bzip2 pbzip2 lbzip2 cppcheck clang clang-tidy g++ lcov ninja-build valgrind wget
        python3 -m pip install --upgrade pip
        python3 -m pip install --upgrade-strategy eager --upgrade cython twine numpy
        #
        # Install infer
        VERSION=1.1.0
        wget -q -O- "https://github.com/facebook/infer/releases/download/v$VERSION/infer-linux64-v$VERSION.tar.xz" | tar -xJ
        echo "$PWD/infer-linux64-v$VERSION/bin" >> $GITHUB_PATH
        #
        # Install newer CMake
        VERSION=3.20.5
        wget -q -O- "https://github.com/Kitware/CMake/releases/download/v$VERSION/cmake-$VERSION-linux-x86_64.tar.gz" | tar -xz
        echo "$PWD/cmake-$VERSION-linux-x86_64/bin" >> $GITHUB_PATH

    - name: System Information
      run: |
        nproc
        cmake --version
        infer --version
        g++ --version
        clang++ --version
        cppcheck --version

    - name: Check committed Cython source
      run: |
        # Note that modification times can't be compared because they are changed by the git checkout
        python3 setup.py build_ext --inplace --cython
        git status
        git diff
        ls -la indexed_bzip2/indexed_bzip2.cpp
        if ! git diff --quiet indexed_bzip2/indexed_bzip2.cpp; then
          echo -e '\e[31mPlease trigger a rebuild of indexed_bzip2.pyx using "python3 setup.py build_ext --inplace --cython" and commit the new file\e[0m'
          git diff indexed_bzip2/indexed_bzip2.cpp
        fi

    - name: Install From Tarball
      run: |
        python3 setup.py sdist
        twine check dist/*
        python3 -m pip install dist/*.tar.gz

    - name: Create Test Sample Data
      run: |
        head -c $(( 1*1024*1024 )) /dev/urandom > decoded-sample
        lbzip2 -1 -k -c decoded-sample > encoded-sample.bz2

    - name: Code Coverage
      run: |
        mkdir -p build-codeov && cd -- "$_"
        CXX=g++ CC=gcc cmake -DCMAKE_BUILD_TYPE=Debug -DCODE_COVERAGE=ON ..
        cmake --build . -- check
        lcov --capture --directory . --base-directory "$( cd ../indexed_bzip2 && pwd  )" --no-external --output-file coverage.info
        lcov --list coverage.info
        bash <( wget -O- -q https://codecov.io/bash ) -f coverage.info

    - name: Run cppcheck
      run: |
        set -o pipefail
        cppcheck --enable=all --std=c++17 --suppress=unusedFunction --suppress=useStlAlgorithm -I indexed_bzip2 tests/ indexed_bzip2/*hpp 2>&1 | tee cppcheck.log
        if grep -E -i 'error: .* \[[^]]*\]$' cppcheck.log; then
            echo -e '\e[31mThere were errors while running cppcheck!\e[0m'
            exit 1
        fi

    - name: Run clang-tidy
      run: |
        mkdir -p build-compile-commands && cd -- "$_"
        cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        cd ..
        set -o pipefail
        run-clang-tidy -j $( nproc ) -p build-compile-commands | tee clang-tidy.log
        if grep -E -i '(warning:|error:) .* \[[^]]*\]$' clang-tidy.log; then
            echo -e '\e[31mThere were errors while running clang-tidy!\e[0m'
            exit 1
        fi

    - name: Run Tests With Sanitizers
      run: |
        for sanitized in address undefined safe-stack; do
        (
            mkdir -p "build-sanitized-$sanitized" && cd -- "$_"
            CXX=clang++ CC=clang cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-fsanitize=$sanitized" ..
            cmake --build . -- check
        )
        done

    - name: Run Tests With Thread Sanitizer
      run: |
        sanitized=thread
        mkdir -p "build-sanitized-$sanitized" && cd -- "$_"
        #
        # TSAN in clang 10 and 11 shows false positives in condition variables:
        # https://github.com/google/sanitizers/issues/1259
        # Similar false positives appear with GCC 10.
        # NO warnings appear with: GCC 8, 9 and clang 12,
        # so I'm pretty sure that these are the referenced false positives.
        clangMajorVersion=$( clang++ --version | sed -n -E 's|.* ([0-9]+)[.][0-9]+[.][0-9]+.*|\1|p' | head -1 )
        if [[ ( "$sanitized" == thread ) && ( "$clangMajorVersion" -le 11 ) ]]; then
            g++ --version
            gccMajorVersion=$( g++ --version | sed -n -E 's|.* ([0-9]+)[.][0-9]+[.][0-9]+.*|\1|p' | head -1 )
            if [[ "$gccMajorVersion" -ge 10 ]]; then
                echo "Could not find a compiler version without known false positives. Skipping TSAN."
                continue
            fi
            CXX=g++
            CC=gcc
        else
            CXX=clang++
            CC=clang
        fi
        export CC CXX
        #
        cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-fsanitize=$sanitized" ..
        cmake --build . -- check

    - name: Run infer
      run: |
        mkdir -p build-compile-commands && cd -- "$_"
        cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        infer run --report-blacklist-path-regex '.*testParallelBitStringFinder.cpp' --compilation-database compile_commands.json

    - name: Run Standard Tests
      # At this step 'build' should already exist and be built and indexed_bzip2 should be installed
      run: |
        mkdir -p build-ibzip2 && cd -- "$_"
        cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug ..
        cmake --build . -- ibzip2
        set -o pipefail
        bash ../tests/testIbzip2.sh | tee run-standard-tests.log
        if grep -i 'failed' run-standard-tests.log; then
            echo -e '\e[31mThere were errors while running the tests!\e[0m'
            exit 1
        fi

    # Valgrind takes up over half the time of the whole pipeline! Therefore, do it last.
    - name: Run valgrind
      run: |
        mkdir -p build-valgrind && cd -- "$_"
        cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Debug
        cmake --build . -- check-memcheck

  Tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Oldest and newest versions should be enough. Python versions are supported 5 years from release date.
        # 3.5 was released 2015-09-13 and end-of-life was 2020-09-13
        # 3.6 was released 2016-12-23 and end-of-life will be 2021-12-23
        # 3.7 was released 2018-06-27 and end-of-life will be 2023-06-27
        # 3.8 was released 2019-10-14 and end-of-life will be 2024-10-14
        # 3.9 was released 2020-10-05 and end-of-life will be 2025-10-25
        # 3.10 is to be released 2021-10-25
        python-version: [3.9]
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get -y install bzip2 pbzip2 lbzip2 g++

    - name: Install Python Modules
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install --upgrade-strategy eager --upgrade cibuildwheel cython twine numpy

    - name: Test Installation From Tarball
      shell: bash
      run: |
        python3 setup.py sdist
        twine check dist/*
        python3 -m pip install dist/*.tar.gz

    - name: Test BZip2 Decoder Python Package
      # indexed_bzip2 should be installed for this step!
      run: python3 tests/testBz2.py


  Build-Wheels:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        # manylinux1 is not supported anymore because it won't compile C++17 code
        manylinux-image: [manylinux2010, manylinux2014]
        exclude:
          - os: macos-latest
            manylinux-image: manylinux2010
          - os: windows-latest
            manylinux-image: manylinux2010

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install Dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install --upgrade-strategy eager --upgrade cython twine cibuildwheel

    - name: Build Tarball
      if: matrix.manylinux-image == 'manylinux_2014' && matrix.os == 'ubuntu-latest'
      run: python3 setup.py sdist

    - name: Build Wheels
      env:
        CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux-image }}
        CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux-image }}
      run: python -m cibuildwheel --output-dir dist

    - name: Check Wheels
      run: twine check dist/*


  Build-Conda:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v2

    - uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true

    - name: Fix macOS CommandLineTools Bug
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        # Fixes:
        #   ld: unsupported tapi file type '!tapi-tbd' in YAML file '/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/usr/lib/libSystem.tbd' for architecture x86_64
        #   clang-10: error: linker command failed with exit code 1 (use -v to see invocation)
        #   error: command '/usr/local/miniconda/conda-bld/indexed_bzip2_1630845496646/_build_env/bin/x86_64-apple-darwin13.4.0-clang++' failed with exit code 1
        #   -> It seems like the conda build script uses the clang compiler installed into the conda environment but then tries to call the ld command from the system and their versions do clash!
        #
        # https://docs.ligo.org/lscsoft/conda/compiling/#installing-the-macos-sdk
        # https://docs.conda.io/projects/conda-build/en/latest/resources/compiler-tools.html#macos-sdk
        # https://github.com/ContinuumIO/anaconda-issues/issues/9096#issuecomment-378655747
        # https://github.com/conda/conda-build/issues/2719#issuecomment-369484512
        #
        wget https://github.com/phracker/MacOSX-SDKs/releases/download/10.13/MacOSX10.9.sdk.tar.xz
        tar -xf MacOSX10.9.sdk.tar.xz
        cat <<EOF >> conda/conda_build_config.yaml
        CONDA_BUILD_SYSROOT:
          - $PWD/MacOSX10.9.sdk
        EOF

    - name: Build Conda Packages
      run: |
        conda install conda-build anaconda-client conda-verify
        conda config --set anaconda_upload no
        cd conda
        conda build .
