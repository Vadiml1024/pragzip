name: Tests

on: [push, pull_request]

jobs:
  Code-Checks:
    name: Code Checks
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Install Dependencies
      run: |
        sudo apt-get -y install bzip2 pbzip2 lbzip2 cppcheck clang clang-tidy g++ lcov ninja-build valgrind wget
        python3 -m pip install --upgrade pip
        python3 -m pip install --upgrade-strategy eager --upgrade cython twine numpy indexed_gzip build
        #
        # Install infer
        VERSION=1.1.0
        wget -q -O- "https://github.com/facebook/infer/releases/download/v$VERSION/infer-linux64-v$VERSION.tar.xz" | tar -xJ
        echo "$PWD/infer-linux64-v$VERSION/bin" >> $GITHUB_PATH
        #
        # Install newer CMake
        VERSION=3.20.5
        wget -q -O- "https://github.com/Kitware/CMake/releases/download/v$VERSION/cmake-$VERSION-linux-x86_64.tar.gz" | tar -xz
        echo "$PWD/cmake-$VERSION-linux-x86_64/bin" >> $GITHUB_PATH

    - name: System Information
      run: |
        nproc
        cmake --version
        infer --version
        g++ --version
        clang++ --version
        cppcheck --version

    - name: Create Test Sample Data
      run: |
        head -c $(( 1*1024*1024 )) /dev/urandom > decoded-sample
        lbzip2 -1 -k -c decoded-sample > encoded-sample.bz2

    - name: Code Coverage
      run: |
        mkdir -p build-codeov && cd -- "$_"
        # It should be compiled with the same g++ version as anylzed with gcov!
        # If g++ --version and gcov --version print different versions, there might be problems when creating
        # the coverage report, e.g., I had: "version 'A85*', prefer 'B12*'".
        # It is possible to specify a different gcov version to lcov using, e.g., lcov --gcov-tool gcov-8.
        # For me it compiled with g++-8 but used gcov-11 by default!
        CXX=g++ CC=gcc cmake -DCMAKE_BUILD_TYPE=Debug -DCODE_COVERAGE=ON ..
        cmake --build . -- check
        lcov --capture --directory . --base-directory "$( cd .. && pwd  )" --no-external --output-file coverage.info
        lcov --list coverage.info
        bash <( wget -O- -q https://codecov.io/bash ) -f coverage.info

    - name: Run cppcheck
      run: |
        set -o pipefail
        cppcheck -j $( nproc ) --enable=all --std=c++17 --suppress=unusedFunction --suppress=useStlAlgorithm \
            -I src/core \
            -I src/indexed_bzip2 \
            -I src/pragzip \
            -I src/pragzip/huffman \
            src 2>&1 | tee cppcheck.log
        if grep -E -i 'error: .* \[[^]]*\]$' cppcheck.log; then
            echo -e '\e[31mThere were errors while running cppcheck!\e[0m'
            exit 1
        fi

    - name: Run clang-tidy
      run: |
        mkdir -p build-compile-commands && cd -- "$_"
        CC=clang CXX=clang++ cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        cd ..
        set -o pipefail
        run-clang-tidy -j $( nproc ) -p build-compile-commands | tee clang-tidy.log
        if grep -E -i '(warning:|error:) .* \[[^]]*\]$' clang-tidy.log; then
            echo -e '\e[31mThere were warnings or errors while running clang-tidy!\e[0m'
            exit 1
        fi

    - name: Run Tests With Sanitizers
      run: |
        for sanitized in address undefined safe-stack; do
        (
            mkdir -p "build-sanitized-$sanitized" && cd -- "$_"
            CXX=clang++ CC=clang cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-fsanitize=$sanitized" ..
            cmake --build . -- check
        )
        done

    - name: Run Tests With Thread Sanitizer
      run: |
        sanitized=thread
        mkdir -p "build-sanitized-$sanitized" && cd -- "$_"
        #
        # TSAN in clang 10 and 11 shows false positives in condition variables:
        # https://github.com/google/sanitizers/issues/1259
        # Similar false positives appear with GCC 10.
        # NO warnings appear with: GCC 8, 9 and clang 12,
        # so I'm pretty sure that these are the referenced false positives.
        clangMajorVersion=$( clang++ --version | sed -n -E 's|.* ([0-9]+)[.][0-9]+[.][0-9]+.*|\1|p' | head -1 )
        if [[ ( "$sanitized" == thread ) && ( "$clangMajorVersion" -le 11 ) ]]; then
            g++ --version
            gccMajorVersion=$( g++ --version | sed -n -E 's|.* ([0-9]+)[.][0-9]+[.][0-9]+.*|\1|p' | head -1 )
            if [[ "$gccMajorVersion" -ge 10 ]]; then
                echo "Could not find a compiler version without known false positives. Skipping TSAN."
                continue
            fi
            CXX=g++
            CC=gcc
        else
            CXX=clang++
            CC=clang
        fi
        export CC CXX
        #
        cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-fsanitize=$sanitized" ..
        cmake --build . -- check

    - name: Run infer
      run: |
        mkdir -p build-compile-commands && cd -- "$_"
        cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        infer run --report-blacklist-path-regex '.*testParallelBitStringFinder.cpp' --compilation-database compile_commands.json

    - name: Run Standard Tests
      # At this step 'build' should already exist and be built and indexed_bzip2 should be installed
      run: |
        mkdir -p build-ibzip2 && cd -- "$_"
        cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug ..
        cmake --build . -- ibzip2
        set -o pipefail
        bash ../src/tests/testIbzip2.sh | tee run-standard-tests.log
        if grep -i 'failed' run-standard-tests.log; then
            echo -e '\e[31mThere were errors while running the tests!\e[0m'
            exit 1
        fi

    # Valgrind takes up over half the time of the whole pipeline! Therefore, do it last.
    - name: Run valgrind
      if: github.ref == 'refs/heads/master'
      run: |
        mkdir -p build-valgrind && cd -- "$_"
        cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-DSHORT_TESTS" ..
        cmake --build . -- check-memcheck

  Tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Oldest and newest versions should be enough. Python versions are supported 5 years from release date.
        # 3.5 was released 2015-09-13 and end-of-life was 2020-09-13
        # 3.6 was released 2016-12-23 and end-of-life will be 2021-12-23
        # 3.7 was released 2018-06-27 and end-of-life will be 2023-06-27
        # 3.8 was released 2019-10-14 and end-of-life will be 2024-10-14
        # 3.9 was released 2020-10-05 and end-of-life will be 2025-10-25
        # 3.10 was released 2021-10-04 and end-of-life will be 2026-10-04
        python-version: ['3.7', '3.10']
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get -y install bzip2 pbzip2 lbzip2 g++

    - name: Install Python Modules
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install --upgrade-strategy eager --upgrade cibuildwheel cython twine numpy

    - name: Install Python Modules (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # https://github.com/pypa/build/issues/253#issuecomment-793906474
        # https://bugs.python.org/issue43749
        # Only seems to be an issue with versions older than 3.9 because they did not backport the fix.
        python3 -m pip install --upgrade build[virtualenv]

    - name: Install Python Modules (Non-Windows)
      if: matrix.os != 'windows-latest'
      run: |
        python3 -m pip install --upgrade build

    - name: Test indexed_bzip2 Installation From Tarball
      working-directory: python/indexed_bzip2
      shell: bash
      run: |
        python3 -m build
        twine check dist/*
        python3 -m pip install dist/*.tar.gz

    - name: Test pragzip Installation From Tarball
      working-directory: python/pragzip
      shell: bash
      run: |
        python3 -m build
        twine check dist/*
        python3 -m pip install dist/*.tar.gz

    - name: Test BZip2 Decoder Python Package
      if: github.ref == 'refs/heads/master'
      # indexed_bzip2 should be installed for this step!
      run: python3 src/tests/testBz2.py

    - name: Test pragzip Installation From Tarball
      working-directory: python/pragzip
      shell: bash
      run: |
        python3 -m build
        twine check dist/*
        python3 -m pip install dist/*.tar.gz
